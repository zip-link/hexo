{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/tags/index.md.bak","path":"tags/index.md.bak","modified":0,"renderable":0},{"_id":"themes/material-x/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/Monaco.ttf","path":"fonts/Monaco.ttf","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/binft.js","path":"js/binft.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/binft.js.bak","path":"js/binft.js.bak","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/click_show_text.js","path":"js/click_show_text.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/volantis.js","path":"js/volantis.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/Skranji-Regular.ttf","path":"fonts/Skranji-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/Ubuntu-Regular.ttf","path":"fonts/Ubuntu-Regular.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"1ef259f6ad00e344de4c04fbd78be62b0e540a8d","modified":1580104343480},{"_id":"themes/material-x/_config.yml","hash":"dc66bad137a95aa14c5200dce594fff71d4cbba2","modified":1580112562265},{"_id":"themes/material-x/.gitignore","hash":"f875b6524d4c61e5de0a1d9efdec1fe451d7bc07","modified":1577979909281},{"_id":"themes/material-x/LICENSE","hash":"13b0862f4ed1914abe887a47df2c3ca5adfa8f3f","modified":1577979909281},{"_id":"themes/material-x/_config.yml.bak","hash":"21abc59265751fab35f46ccc76c073290246c954","modified":1580112525272},{"_id":"themes/material-x/README.md","hash":"a8ecf6b9e49faf20c989cfe9de3f0e272770c3ee","modified":1577979909281},{"_id":"source/tags/index.md.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1580102838386},{"_id":"source/about/index.md","hash":"1da145deabff828a854da24c186d13d318417612","modified":1580104185509},{"_id":"source/categories/index.md","hash":"d781e91e705ec309d9a5724b5df7d922622f0601","modified":1580104459694},{"_id":"source/friends/index.md","hash":"01281ec1e1d555abd4d6053cd94ae750edd1e214","modified":1580104405361},{"_id":"source/tags/index.md","hash":"dd13b5ae3b80b700cd95fb4b58c17993d8672ee2","modified":1580103522564},{"_id":"source/mylist/index.md","hash":"0d01e3eb77e03f291994078db2f14266d067e8d1","modified":1580104434182},{"_id":"themes/material-x/languages/en.yml","hash":"9becc087d3a1558c1d7a180c72a2cd4e7f124924","modified":1577979909281},{"_id":"themes/material-x/languages/zh-CN.yml","hash":"563c280524a088f743933b727b13ce85c93694b2","modified":1577979909281},{"_id":"themes/material-x/languages/zh-HK.yml","hash":"f68b7558103ea3f2cd3271eb3bb530e2a9a01ed9","modified":1577979909281},{"_id":"themes/material-x/languages/zh-TW.yml","hash":"fcd38e5e97b5053e4ccb9b4ca4f5f9d811904262","modified":1577979909281},{"_id":"themes/material-x/layout/archive.ejs","hash":"6a7ae3af04b660b514cf846cfc10018f711d98a0","modified":1577979909289},{"_id":"themes/material-x/layout/category.ejs","hash":"ff5b299f7b0f3668174314c57ffe0389891399a6","modified":1577979909289},{"_id":"themes/material-x/layout/index.ejs","hash":"03ba528ba647d8ad184a2dd08e1c2c3ac4dd7baa","modified":1577979909289},{"_id":"themes/material-x/layout/layout.ejs","hash":"b227034276f4d115290e75d043dcf0f8dea06fcd","modified":1578233779632},{"_id":"themes/material-x/layout/layout.ejs.bak","hash":"27060ba04ffc0ce101675911c49904916a02396e","modified":1578233378061},{"_id":"themes/material-x/layout/links.ejs","hash":"d3a7c13047531f0a465df52c2113cc9c7c62e97e","modified":1577979909289},{"_id":"themes/material-x/layout/list.ejs","hash":"3466d6dede7aab729b2986c145d95154af0856f2","modified":1577979909289},{"_id":"themes/material-x/layout/page.ejs","hash":"3dd6f14881ac16a8ceb48a1d9f9f5d0377cd082c","modified":1577979909289},{"_id":"themes/material-x/layout/post.ejs","hash":"3dd6f14881ac16a8ceb48a1d9f9f5d0377cd082c","modified":1577979909289},{"_id":"themes/material-x/layout/tag.ejs","hash":"6885d1d47c6477d980079ad8e970c163e43a81d1","modified":1577979909289},{"_id":"themes/material-x/source/style.less","hash":"bd90f674eca5279de970627ce19f20fd784c293a","modified":1577979909313},{"_id":"source/_posts/3D/3Dmodeling.md","hash":"cfe73d116d74b1deebb9587dab248807ca45a717","modified":1580456634826},{"_id":"source/_posts/3D/3Dmodeling.md.bak","hash":"904d32d740353003ff3dfa29b660f118b03b9155","modified":1580456577222},{"_id":"source/_posts/top/top.md","hash":"a3cc108163a5177ae66b5d16e04d3fd643064ccf","modified":1580454677098},{"_id":"themes/material-x/.github/ISSUE_TEMPLATE/------.md","hash":"cc03dbf4326b9cd0f5a8a024bf6bb622334eca3f","modified":1577979909281},{"_id":"themes/material-x/layout/_cover/search.ejs","hash":"c5c79e41c43efadf41ffc2393152b89213351d00","modified":1577979909281},{"_id":"themes/material-x/layout/_meta/author.ejs","hash":"5a91042487663e7286050f741fe7ee8de189881a","modified":1577979909281},{"_id":"themes/material-x/layout/_meta/categories.ejs","hash":"4b5a6cd4a55742b5963dcd63c3bd9fb8534ba178","modified":1577979909281},{"_id":"themes/material-x/layout/_meta/counter.ejs","hash":"7a22e5cec94673edcb084680df445aa7d800ca2e","modified":1577979909281},{"_id":"themes/material-x/layout/_meta/date.ejs","hash":"0ef066dc7247464359a85d9c39010c1e7e9ffb1d","modified":1577979909281},{"_id":"themes/material-x/layout/_meta/music.ejs","hash":"1ac33225b2dfc4d5498a86266f97082a8bf135ec","modified":1577979909281},{"_id":"themes/material-x/layout/_meta/share.ejs","hash":"96cac09c9906283f454039a9f5c0302104338e64","modified":1577979909281},{"_id":"themes/material-x/layout/_meta/tags.ejs","hash":"5181501be2d1131a30cfab58c190aa0e4ac183de","modified":1577979909281},{"_id":"themes/material-x/layout/_meta/thumbnail.ejs","hash":"99f3e0438be97f9462d9a9189117260d811da2e1","modified":1577979909281},{"_id":"themes/material-x/layout/_meta/title.ejs","hash":"58f30ee662f22f55ef9191e06390229beda20694","modified":1577979909281},{"_id":"themes/material-x/layout/_meta/top.ejs","hash":"e4e8bf49173f757ed19ed49d07e0db03f146e989","modified":1577979909281},{"_id":"themes/material-x/layout/_meta/updated.ejs","hash":"2d6e1e234721b930308caf61d2d086213f2389e4","modified":1577979909285},{"_id":"themes/material-x/layout/_meta/wordcount.ejs","hash":"e1c8e3295512ce283f296c0ee868fadea2449055","modified":1577979909285},{"_id":"themes/material-x/layout/_partial/archive.ejs","hash":"ca70dd02c7efb4067c453e8a9414bd3f203db926","modified":1577979909285},{"_id":"themes/material-x/layout/_partial/article.ejs","hash":"0ad621ec187299d3480dbeb779c8dc0709f95b6c","modified":1577979909285},{"_id":"themes/material-x/layout/_partial/categories.ejs","hash":"12b2fca703fa56da7a85045bf17499845c3fe5bb","modified":1577979909285},{"_id":"themes/material-x/layout/_partial/cover.ejs","hash":"61430899b26806df450ab75e021534b482ad7746","modified":1577979909285},{"_id":"themes/material-x/layout/_partial/footer.ejs","hash":"ea1e86c615aa8cc6a3f6d073223e9c229a135a26","modified":1577979909285},{"_id":"themes/material-x/layout/_partial/head.ejs","hash":"fb76827868b518ace91f0f125065bcf5229232de","modified":1577979909285},{"_id":"themes/material-x/layout/_partial/header.ejs","hash":"f026855983145c8cd5f02cc32d897c696fcb34b2","modified":1578235802810},{"_id":"themes/material-x/layout/_partial/mathjax.ejs","hash":"a51a072654643ecf850f813a31dd40d746f8ab96","modified":1577979909285},{"_id":"themes/material-x/layout/_partial/meta.ejs","hash":"92475542dbcf11500e74f51edd338f79acfffd44","modified":1577979909285},{"_id":"themes/material-x/layout/_partial/post.ejs","hash":"d894a3b3adf38ea0c93c7d24a89a9014e10825b2","modified":1577979909285},{"_id":"themes/material-x/layout/_partial/scripts.ejs","hash":"772376f5fd9f813b91f3946bc017267105060d0c","modified":1577979909285},{"_id":"themes/material-x/layout/_partial/side.ejs","hash":"ef63195d7666f75751f133262f38bd55dff4bb16","modified":1577979909285},{"_id":"themes/material-x/layout/_third-party/aplayer.ejs","hash":"9260682432e0a80261435b4bd27ccf16b8d96fed","modified":1577979909285},{"_id":"themes/material-x/layout/_third-party/clipboard.ejs","hash":"628a0ff18fecc3c866070517aad19366c00f417c","modified":1577979909285},{"_id":"themes/material-x/layout/_third-party/comments.ejs","hash":"2d9136a01abaaae3b2fbada50aba94db605841f6","modified":1577979909285},{"_id":"themes/material-x/layout/_third-party/fancybox.ejs","hash":"a840db5c132ded3be61e748ef1feadae1435465d","modified":1577979909285},{"_id":"themes/material-x/layout/_third-party/share.ejs","hash":"5b2a57aac6df2be654e45104177a9382641d7584","modified":1577979909285},{"_id":"themes/material-x/layout/_widget/author.ejs","hash":"29ee4ea72f2b2ca6ddeeb979d7e141c2f8768cc5","modified":1578233792226},{"_id":"themes/material-x/layout/_widget/author.ejs.bak","hash":"7c30eacd142d9d68f23fc1dd0b58b701f3624427","modified":1578233706171},{"_id":"themes/material-x/layout/_widget/category.ejs","hash":"a4b3059bb77841a0569243b2ef474ba1fd67ca3a","modified":1577979909285},{"_id":"themes/material-x/layout/_widget/grid.ejs","hash":"33372405602c2bd6dcff42011d14998e5a2b2b70","modified":1577979909289},{"_id":"themes/material-x/layout/_widget/header.ejs","hash":"d06e00aa3785dc1f3a0fe29f3a4ee6b923b4dcb1","modified":1577979909289},{"_id":"themes/material-x/layout/_widget/list.ejs","hash":"2ce0d61c140852c84d6f0e52b063b0403836be37","modified":1577979909289},{"_id":"themes/material-x/layout/_widget/music.ejs","hash":"a02103653676ab8016b2c4e93c7cd402d4a889bc","modified":1577979909289},{"_id":"themes/material-x/layout/_widget/plain.ejs","hash":"27737e8f046ee3e8907a3ebb86e9800d405a7f4a","modified":1577979909289},{"_id":"themes/material-x/layout/_widget/related_posts.ejs","hash":"aaf497403902a6bd2066c3a7de9b99170914daa4","modified":1577979909289},{"_id":"themes/material-x/layout/_widget/tagcloud.ejs","hash":"84cdb8403125e98c110927649315f7a3eff1d4ec","modified":1577979909289},{"_id":"themes/material-x/layout/_widget/toc.ejs","hash":"dd5f82c8965da414d96d935645fc27f9f3f05566","modified":1577979909289},{"_id":"themes/material-x/source/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1577979909289},{"_id":"themes/material-x/source/js/binft.js","hash":"11de6ee20eff63084a66e45930705c198f4c8608","modified":1580113913610},{"_id":"themes/material-x/source/js/binft.js.bak","hash":"9a0196782b43a006f0324774c93475a1e63dc407","modified":1580113843018},{"_id":"themes/material-x/source/js/click_show_text.js","hash":"1870ff0f5b0e0380046e396b7193ed23a9a5dbe4","modified":1578142545568},{"_id":"themes/material-x/source/js/fireworks.js","hash":"c28c5fa8f2dd650939d98b45a98905cc11e8e912","modified":1578143364613},{"_id":"themes/material-x/source/js/search.js","hash":"603215c3ae9d2f3c019753dd6c9d228302505bb3","modified":1577979909305},{"_id":"themes/material-x/source/less/_archive.less","hash":"59c565fa7261e0e2475e72b7577c38587da0a32d","modified":1577979909309},{"_id":"themes/material-x/source/less/_article.less","hash":"73e5cbef80b3fa954b28a4e6d3e5b16e4a52d14d","modified":1577979909309},{"_id":"themes/material-x/source/less/_base.less","hash":"71474d224b49e96fa93ee7be2231c1f4b5f8846c","modified":1577979909313},{"_id":"themes/material-x/source/less/_color.less","hash":"58d82fe94ed9a92c8b3d8ebec32e69bf8606f4a0","modified":1577979909313},{"_id":"themes/material-x/source/less/_defines.less","hash":"c52a7713bdcdfaa2053f968d262aaf3c5e2bef32","modified":1577979909313},{"_id":"themes/material-x/source/less/_fonts.less","hash":"70d7cc554a13736c84549afdfd64e30d28a70684","modified":1577979909313},{"_id":"themes/material-x/source/less/_footer.less","hash":"f53de1b635591582ec9b1ec74249a622fc2cb8fa","modified":1577979909313},{"_id":"themes/material-x/source/less/_header.less","hash":"6d66f2a5c4278135fafc3a78eafed77aa13af1fa","modified":1577979909313},{"_id":"themes/material-x/source/less/_layout.less","hash":"d44abc94ffe5e4f70ecc8e5861ae05fb49f1da88","modified":1577979909313},{"_id":"themes/material-x/source/less/_links.less","hash":"eff0fcf9ef5cd2fe39c5f1d9ff556318c384d6a5","modified":1577979909313},{"_id":"themes/material-x/source/less/_main.less","hash":"4124abc0fd6fcbd4d8af679d04fd920ae562d59f","modified":1577979909313},{"_id":"themes/material-x/source/less/_normalize.less","hash":"18d8d0dcf2fba25a994f03f2d89838d8a346f603","modified":1577979909313},{"_id":"themes/material-x/source/less/_pagination.less","hash":"165e2c369faf70858b731bb6d483d8991259887e","modified":1577979909313},{"_id":"themes/material-x/source/less/_search.less","hash":"a41d5484d832ca4820bdb67d5f469700bab1e01b","modified":1577979909313},{"_id":"themes/material-x/source/less/_side.less","hash":"e6c81f9d9c71f687aaa2a735c44cb5cd9bf79088","modified":1577979909313},{"_id":"themes/material-x/source/less/_toc.less","hash":"7fadda4dbc0f1891f21f7526c88560878ba4e599","modified":1577979909313},{"_id":"themes/material-x/source/less/_tog.less","hash":"73e72c4efd04a8721a87002de1a8a0201e1f5564","modified":1577979909313},{"_id":"themes/material-x/source/less/_typo.less","hash":"6a93f9fab3e1dfac4dc80dd77bf6b1223b5fb058","modified":1577979909313},{"_id":"themes/material-x/source/js/app.js","hash":"20ba53cc54035dd091605508155ce54f8491f34e","modified":1577979909305},{"_id":"source/_posts/embedded/VoiceAssistant/VoiceAssistant.md","hash":"04f78059c4a0815d83c95610f2a2fb81d6e3910a","modified":1580961168071},{"_id":"source/_posts/embedded/VoiceAssistant/VoiceAssistant.md.bak","hash":"c4db6663eee9cf82c6c8cd304c8c6d987ce62a98","modified":1580961117656},{"_id":"source/_posts/embedded/blogServer/blogServer1.md","hash":"8b281a334e23cd02a8971725ada11449eb5b946c","modified":1580451333498},{"_id":"source/_posts/embedded/blogServer/blogServer1.md.bak","hash":"f1962d9f5180f6ed7f705fa84d21e68c436b7e1e","modified":1580451276201},{"_id":"source/_posts/embedded/blogServer/blogServer2.md","hash":"b84f8a947da5d684b3f2cca04f923362cae7216f","modified":1580453714826},{"_id":"source/_posts/embedded/blogServer/blogServer2.md.bak","hash":"dd834fe4032d509165aa7dcb42a0573da4b889c2","modified":1580451484124},{"_id":"source/_posts/embedded/blogServer/blogServer3.md","hash":"e7d36b95c5cbbc71a0d7802a5554c68c384a5ebf","modified":1580451342827},{"_id":"source/_posts/embedded/blogServer/blogServer3.md.bak","hash":"673641d14932196d604f7b20062ee6b064beb518","modified":1580451243912},{"_id":"source/_posts/embedded/blogServer/blogServer4.md","hash":"8ebe34332ddfa4938e9d553a90d3f99a17bfa3f8","modified":1580973332272},{"_id":"source/_posts/embedded/blogServer/blogServer4.md.bak","hash":"300877070327a041776a49199f5dcd13dbf382db","modified":1580973084984},{"_id":"source/_posts/embedded/stm32/embedded-stm32-hi2c.md","hash":"831503b06d99fc8eac60b414118ce7819b50b230","modified":1580456642050},{"_id":"source/_posts/embedded/stm32/embedded-stm32-hi2c.md.bak","hash":"7615881ef53b2337b8ed835705a777c70a168ef4","modified":1580456494509},{"_id":"source/_posts/embedded/stm32/embedded-stm32-stlink.md","hash":"02b09510122f26831dd6f9706d0902017c59e67f","modified":1580457284689},{"_id":"source/_posts/embedded/stm32/embedded-stm32-stlink.md.bak","hash":"2ab12d8b7837b6ebf2877cc1a5860df11b46de5d","modified":1580457165502},{"_id":"themes/material-x/source/js/volantis.js","hash":"da06cd7b94873ed3036d825ae5a985ae6dde66e6","modified":1577979909309},{"_id":"themes/material-x/source/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1577979909297},{"_id":"themes/material-x/source/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1577979909305},{"_id":"public/content.json","hash":"f110c24b6f1f962294e4970b615896971548847c","modified":1580973344592},{"_id":"public/search.xml","hash":"a50083e46d0151c80a767caa90002c9ba362c0b3","modified":1580973344592},{"_id":"public/404.html","hash":"b67c0fe31e3703574801bac68ef64c91c4377b3c","modified":1580973344592},{"_id":"public/about/index.html","hash":"a0d9deada3d5780fd1bc039d81cf44c022b5d7b3","modified":1580973344592},{"_id":"public/categories/index.html","hash":"a711ba199deb7b9a05205424045bc9945d101ca4","modified":1580973344592},{"_id":"public/friends/index.html","hash":"8bceb38fca98e1081d5d32996ce54972ebb51b1d","modified":1580973344592},{"_id":"public/tags/index.html","hash":"d0904ecc1796cf1d789032b66fffdab733d4005c","modified":1580973344592},{"_id":"public/mylist/index.html","hash":"1d254f568c61b8dec680479f6dcba197ed141c4c","modified":1580973344592},{"_id":"public/2020/02/06/embedded/blogServer/blogServer4/index.html","hash":"7af9eb17a5e6b0e0c4f889347098f8a3d654ba77","modified":1580973344592},{"_id":"public/2020/02/06/embedded/VoiceAssistant/VoiceAssistant/index.html","hash":"27bd0f1e718e9948a0cf3b6cced88a0df909d934","modified":1580973344592},{"_id":"public/2020/01/31/embedded/stm32/embedded-stm32-stlink/index.html","hash":"9878a91ef124190641a2968b84f5828146c7c782","modified":1580973344592},{"_id":"public/2020/01/31/embedded/stm32/embedded-stm32-hi2c/index.html","hash":"f332cd66f52eed453301b483d78d0f9221510004","modified":1580973344592},{"_id":"public/2020/01/31/3D/3Dmodeling/index.html","hash":"93c7921c76c81149bb58f5c81638448a3134d8a8","modified":1580973344592},{"_id":"public/2020/01/31/top/top/index.html","hash":"a028c07fadc63dc547236d44e2cfb63a13a47285","modified":1580973344592},{"_id":"public/2020/01/31/embedded/blogServer/blogServer3/index.html","hash":"c78e2939fd38dd1e963a67040eadfd755bc21d22","modified":1580973344592},{"_id":"public/2020/01/31/embedded/blogServer/blogServer2/index.html","hash":"cfcbba07cb6ef0f92796ae29d290d9d75701e498","modified":1580973344592},{"_id":"public/2020/01/31/embedded/blogServer/blogServer1/index.html","hash":"f621ff504cd7ba77032c75e5fb8f971f8eb957f3","modified":1580973344592},{"_id":"public/archives/index.html","hash":"e56e13179136ba421697d6b4663db78198865e8f","modified":1580973344592},{"_id":"public/archives/2020/index.html","hash":"f94f836dcb9f1c4645d382ae6afae8c860593e2d","modified":1580973344592},{"_id":"public/archives/2020/01/index.html","hash":"349cdb272767e26819a8af36a207f79e26b03dbb","modified":1580973344592},{"_id":"public/archives/2020/02/index.html","hash":"e65e907727200838ea6dd449c5f491bc38296ad5","modified":1580973344592},{"_id":"public/categories/3D/index.html","hash":"ff3c05831c2f2240cdb096aea8087398fcb69665","modified":1580973344592},{"_id":"public/categories/嵌入式/index.html","hash":"6ae9224966b2a598cdc5a880b85f1fbdfd3277fe","modified":1580973344592},{"_id":"public/categories/嵌入式/博客服务/index.html","hash":"a4b122b8f84befd689956886549aba83623d192a","modified":1580973344592},{"_id":"public/categories/嵌入式/语音助手/index.html","hash":"0b7bfdc3478b9d97869e51426162adff6eb292d8","modified":1580973344592},{"_id":"public/categories/嵌入式/stm32/index.html","hash":"40faca50c95dcbac58535bd3ed86e7c6f6866065","modified":1580973344592},{"_id":"public/index.html","hash":"b213f181aacb71a2d40633b1eb4e6abc7d436dc8","modified":1580973344592},{"_id":"public/tags/3D打印/index.html","hash":"0692bcc51d87bd3f9abc2400f8bc28d3f503e6ce","modified":1580973344592},{"_id":"public/tags/建模/index.html","hash":"5a5bdc8655d62ce444bf1cd5a0877c11531dd828","modified":1580973344592},{"_id":"public/tags/语音助手/index.html","hash":"029563e49c0e0ac80be9bbd2bffa82e9dae0e713","modified":1580973344592},{"_id":"public/tags/Siri/index.html","hash":"2acfdb6d78933902dc9a1c4caccd93e2c80ee512","modified":1580973344592},{"_id":"public/tags/Hexo/index.html","hash":"e7252afd6a7aced033326fca0afbcc1e9d1b15ca","modified":1580973344592},{"_id":"public/tags/嵌入式/index.html","hash":"531bca11ea446d68898c64a7074422146845a8c1","modified":1580973344592},{"_id":"public/tags/博客服务/index.html","hash":"173eeda080d1bc8244051b1b136cd7d6e0e027e7","modified":1580973344592},{"_id":"public/tags/stm32/index.html","hash":"af951ddc7b5c207a5aaab7587d6d26754f4878f4","modified":1580973344592},{"_id":"public/tags/I2C/index.html","hash":"2e8f249c7a1311bdabd4264bdde721259e78b61c","modified":1580973344592},{"_id":"public/tags/单片机/index.html","hash":"cef9662a8056339356e38ea79e1049c5907768fe","modified":1580973344592},{"_id":"public/tags/调试器/index.html","hash":"099db6805bb90c23a56fd5d2cdba3d9d1971c82a","modified":1580973344592},{"_id":"public/tags/index.md.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1580973344592},{"_id":"public/js/binft.js.bak","hash":"9a0196782b43a006f0324774c93475a1e63dc407","modified":1580973344592},{"_id":"public/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1580973344592},{"_id":"public/js/binft.js","hash":"11de6ee20eff63084a66e45930705c198f4c8608","modified":1580973344592},{"_id":"public/js/click_show_text.js","hash":"1870ff0f5b0e0380046e396b7193ed23a9a5dbe4","modified":1580973344592},{"_id":"public/js/fireworks.js","hash":"c28c5fa8f2dd650939d98b45a98905cc11e8e912","modified":1580973344592},{"_id":"public/js/app.js","hash":"20ba53cc54035dd091605508155ce54f8491f34e","modified":1580973344592},{"_id":"public/js/search.js","hash":"603215c3ae9d2f3c019753dd6c9d228302505bb3","modified":1580973344592},{"_id":"public/js/volantis.js","hash":"da06cd7b94873ed3036d825ae5a985ae6dde66e6","modified":1580973344592},{"_id":"public/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1580973344592},{"_id":"public/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1580973344592},{"_id":"public/style.css","hash":"9104ec7b4370a9f98d9447bd222c1e02b5dfa859","modified":1580973344592}],"Category":[{"name":"3D","_id":"ck6aem40b0008v251ctgohlym"},{"name":"嵌入式","_id":"ck6aem426000gv251gffp9bg4"},{"name":"博客服务","parent":"ck6aem426000gv251gffp9bg4","_id":"ck6aem44k000sv251eg8k6jjx"},{"name":"语音助手","parent":"ck6aem426000gv251gffp9bg4","_id":"ck6aem44y000vv2512cs076jd"},{"name":"Ƕ��ʽ","_id":"ck6aem455000yv2513y53g1ey"},{"name":"stm32","parent":"ck6aem426000gv251gffp9bg4","_id":"ck6aem45f0013v2510dpna4sa"},{"name":"���ͷ���","parent":"ck6aem455000yv2513y53g1ey","_id":"ck6aem46k001lv251d9bnakuh"}],"Data":[],"Page":[{"layout":"page","title":"404 Not Found","body":["article","comments"],"meta":{"header":false,"footer":false},"sidebar":false,"valine":{"path":"/404.html","placeholder":"请留言告诉我您要访问哪个页面找不到了"},"_content":"\n# <center>**404 Not Found**</center>\n\n<br>\n\n<center>**很抱歉，您访问的页面不存在**</center>\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>\n","source":"404.md","raw":"---\nlayout: page\ntitle: 404 Not Found\nbody: [article, comments]\nmeta:\n  header: false\n  footer: false\nsidebar: false\nvaline:\n  path: /404.html\n  placeholder: 请留言告诉我您要访问哪个页面找不到了\n---\n\n# <center>**404 Not Found**</center>\n\n<br>\n\n<center>**很抱歉，您访问的页面不存在**</center>\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>\n","date":"2020-01-27T05:52:23.488Z","updated":"2020-01-27T05:52:23.480Z","path":"404.html","comments":1,"_id":"ck6aem3kp0000v25195nn1iu1","content":"<h1 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a><center><strong>404 Not Found</strong></center></h1><br>\n\n<center>**很抱歉，您访问的页面不存在**</center>\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a><center><strong>404 Not Found</strong></center></h1><br>\n\n<center>**很抱歉，您访问的页面不存在**</center>\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>\n"},{"layout":"page","title":"关于","body":["article","grid","comments"],"valine":{"placeholder":"有什么想对我说的呢？"},"sidebar":false,"_content":"","source":"about/index.md","raw":"---\nlayout: page\ntitle: 关于\nbody: [article, grid, comments]\nvaline:\n  placeholder: 有什么想对我说的呢？\nsidebar: false\n---\n","date":"2020-01-27T05:49:45.517Z","updated":"2020-01-27T05:49:45.509Z","path":"about/index.html","comments":1,"_id":"ck6aem3se0001v2517vyq9kbi","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"category","index":true,"title":"所有分类","_content":"","source":"categories/index.md","raw":"---\nlayout: category\nindex: true\ntitle: 所有分类\n---\n","date":"2020-01-27T05:54:19.694Z","updated":"2020-01-27T05:54:19.694Z","path":"categories/index.html","comments":1,"_id":"ck6aem3sp0002v2510x4a3qx9","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"links","title":"我的朋友们","links":[{"group":"技术大佬","icon":"fas fa-user-tie","items":[{"name":null,"avatar":null,"url":null,"backgroundColor":"#3E74C9","textColor":"#fff","tags":["标签1","标签2"]}]},{"group":"分组2","icon":"fas fa-user-tie","items":[{"name":null,"avatar":null,"url":null,"backgroundColor":"#3E74C9","textColor":"#fff","tags":["标签1","标签2"]}]}],"_content":"\n#这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。\n","source":"friends/index.md","raw":"---\nlayout: links     # 必须\ntitle: 我的朋友们   # 可选，这是友链页的标题\nlinks:\n  - group: 技术大佬\n    icon: fas fa-user-tie\n    items:\n    - name:     # 博客名\n      avatar:   # 头像链接\n      url:      # 博客链接\n      backgroundColor: '#3E74C9' # 卡片背景颜色\n      textColor: '#fff'  # 卡片文字颜色\n      tags:     # 标签\n      - 标签1\n      - 标签2\n  - group: 分组2\n    icon: fas fa-user-tie\n    items:\n    - name:     # 博客名\n      avatar:   # 头像链接\n      url:      # 博客链接\n      backgroundColor: '#3E74C9' # 卡片背景颜色\n      textColor: '#fff'  # 卡片文字颜色\n      tags:     # 标签\n      - 标签1\n      - 标签2\n---\n\n#这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。\n","date":"2020-01-27T05:53:25.361Z","updated":"2020-01-27T05:53:25.361Z","path":"friends/index.html","comments":1,"_id":"ck6aem3t00003v251h28vbz1g","content":"<p>#这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。</p>\n"},{"layout":"tag","index":true,"title":"all tags","_content":"","source":"tags/index.md","raw":"---\nlayout: tag\nindex: true\ntitle: all tags\n---\n","date":"2020-01-27T05:38:42.572Z","updated":"2020-01-27T05:38:42.564Z","path":"tags/index.html","comments":1,"_id":"ck6aem3tb0004v251dxo5fkuj","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"list","type":"mylist","index":true,"_content":"","source":"mylist/index.md","raw":"---\nlayout: list\ntype: mylist\nindex: true\n---\n","date":"2020-01-27T05:53:54.182Z","updated":"2020-01-27T05:53:54.182Z","path":"mylist/index.html","title":"","comments":1,"_id":"ck6aem3tk0005v25122ag12nn","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"人脸三维建模软件","date":"2020-01-31T07:21:43.000Z","_content":"最近接触了三维打印机，学了两天3Dmax建模，打印了一个简单的手机壳，形状倒是很漂亮不过还是没达到理想的效果。\n<!-- more -->\n设想如果打印机能把我的人脸模型打印出来岂不是更完美了，毕竟这都是电影里才有的画面，真要让我完成了，哈哈！！！于是想方设法开始找人脸三维建模软件，找了好多软件有手机APP，也有PC程序。这里简单介绍几个比较好用的软件。\n\n先从简单的开始吧，首先是一个APP，Qlone.可以很方便的直接用手机围着建模物体转几圈就能把模型建出来，而且自己感觉模型的相似度很高。不过前提是你要把物体放在官方提供的二维码上面，软件才能识别出来物体进行建模。同样一个更大的缺点是如果想要导出模型的或需要付费。。。这对我简直是致命的缺点，我也是因此直接卸载。所以不多说了。\n\n![这是一个图片](https://img-blog.csdnimg.cn/20190408201714823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx,size_16,color_FFFFFF,t_70)\n第二个是PC端软件，3DSOM Pro v5，软件的官网对软件有着高度的评价，官网也给处理示例或模型。需要对准一个物体进行360的无死角的拍照，最后将所有照片上传到该软件进行建模。按照步骤一步步来，我拍摄了30多张照片，最后软件只识别13张，其余的都作废了，上传完后还要对所有的图片逐个进行边缘的分离，人工处理（很累，费眼神）。经过大约20-30分钟的等待后模型就能建出来了，过程很是曲折，不过模型确实是有点意思，当然不是很完美。3DSOM的建模方法让我想到了科幻电影特效制作过程中，在整个绿色幕布下拍摄建模的方法，感觉很是类似。\n\n该软件的中文资料较少，[简单使用步骤在这](https://blog.csdn.net/qq_41281601/article/details/89107267)\n\n这里是官方14天试用版的[下载地址](http://www.3dsom.com/free-trial/)\n\n第三个是我最后决定用来人脸建模的软件FaceGen Modeller，在人脸建模方面可以说很好用了，估计在这也是网上能找到的最好用的了吧。这个软件可以直接随机生成人脸也可以根据你的照片生成真人的人脸模型，人脸模型的生成需要人脸的三张照片，正面和左右两面，然后按照软件示例中的人脸对人脸的特征点进行定位，普通电脑经过10左右就能生成人脸模型了。最后出来的模型和真人没什么区别，反正熟人一看就知道是你。人脸建模方面，强烈推荐使用。使用步骤简单不做详细的阐述了。\n![这是一个图片](https://img-blog.csdnimg.cn/20190408210706800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx,size_16,color_FFFFFF,t_70)","source":"_posts/3D/3Dmodeling.md","raw":"---\ntitle: 人脸三维建模软件\ncategories:\n  - 3D\ntags:\n  - 3D打印\n  - 建模\ndate: 2020-01-31 07:21:43\n---\n最近接触了三维打印机，学了两天3Dmax建模，打印了一个简单的手机壳，形状倒是很漂亮不过还是没达到理想的效果。\n<!-- more -->\n设想如果打印机能把我的人脸模型打印出来岂不是更完美了，毕竟这都是电影里才有的画面，真要让我完成了，哈哈！！！于是想方设法开始找人脸三维建模软件，找了好多软件有手机APP，也有PC程序。这里简单介绍几个比较好用的软件。\n\n先从简单的开始吧，首先是一个APP，Qlone.可以很方便的直接用手机围着建模物体转几圈就能把模型建出来，而且自己感觉模型的相似度很高。不过前提是你要把物体放在官方提供的二维码上面，软件才能识别出来物体进行建模。同样一个更大的缺点是如果想要导出模型的或需要付费。。。这对我简直是致命的缺点，我也是因此直接卸载。所以不多说了。\n\n![这是一个图片](https://img-blog.csdnimg.cn/20190408201714823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx,size_16,color_FFFFFF,t_70)\n第二个是PC端软件，3DSOM Pro v5，软件的官网对软件有着高度的评价，官网也给处理示例或模型。需要对准一个物体进行360的无死角的拍照，最后将所有照片上传到该软件进行建模。按照步骤一步步来，我拍摄了30多张照片，最后软件只识别13张，其余的都作废了，上传完后还要对所有的图片逐个进行边缘的分离，人工处理（很累，费眼神）。经过大约20-30分钟的等待后模型就能建出来了，过程很是曲折，不过模型确实是有点意思，当然不是很完美。3DSOM的建模方法让我想到了科幻电影特效制作过程中，在整个绿色幕布下拍摄建模的方法，感觉很是类似。\n\n该软件的中文资料较少，[简单使用步骤在这](https://blog.csdn.net/qq_41281601/article/details/89107267)\n\n这里是官方14天试用版的[下载地址](http://www.3dsom.com/free-trial/)\n\n第三个是我最后决定用来人脸建模的软件FaceGen Modeller，在人脸建模方面可以说很好用了，估计在这也是网上能找到的最好用的了吧。这个软件可以直接随机生成人脸也可以根据你的照片生成真人的人脸模型，人脸模型的生成需要人脸的三张照片，正面和左右两面，然后按照软件示例中的人脸对人脸的特征点进行定位，普通电脑经过10左右就能生成人脸模型了。最后出来的模型和真人没什么区别，反正熟人一看就知道是你。人脸建模方面，强烈推荐使用。使用步骤简单不做详细的阐述了。\n![这是一个图片](https://img-blog.csdnimg.cn/20190408210706800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx,size_16,color_FFFFFF,t_70)","slug":"3D/3Dmodeling","published":1,"updated":"2020-01-31T07:43:54.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6aem3z70006v2516av92fxs","content":"<p>最近接触了三维打印机，学了两天3Dmax建模，打印了一个简单的手机壳，形状倒是很漂亮不过还是没达到理想的效果。</p>\n<a id=\"more\"></a>\n<p>设想如果打印机能把我的人脸模型打印出来岂不是更完美了，毕竟这都是电影里才有的画面，真要让我完成了，哈哈！！！于是想方设法开始找人脸三维建模软件，找了好多软件有手机APP，也有PC程序。这里简单介绍几个比较好用的软件。</p>\n<p>先从简单的开始吧，首先是一个APP，Qlone.可以很方便的直接用手机围着建模物体转几圈就能把模型建出来，而且自己感觉模型的相似度很高。不过前提是你要把物体放在官方提供的二维码上面，软件才能识别出来物体进行建模。同样一个更大的缺点是如果想要导出模型的或需要付费。。。这对我简直是致命的缺点，我也是因此直接卸载。所以不多说了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190408201714823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx,size_16,color_FFFFFF,t_70\" alt=\"这是一个图片\"><br>第二个是PC端软件，3DSOM Pro v5，软件的官网对软件有着高度的评价，官网也给处理示例或模型。需要对准一个物体进行360的无死角的拍照，最后将所有照片上传到该软件进行建模。按照步骤一步步来，我拍摄了30多张照片，最后软件只识别13张，其余的都作废了，上传完后还要对所有的图片逐个进行边缘的分离，人工处理（很累，费眼神）。经过大约20-30分钟的等待后模型就能建出来了，过程很是曲折，不过模型确实是有点意思，当然不是很完美。3DSOM的建模方法让我想到了科幻电影特效制作过程中，在整个绿色幕布下拍摄建模的方法，感觉很是类似。</p>\n<p>该软件的中文资料较少，<a href=\"https://blog.csdn.net/qq_41281601/article/details/89107267\" target=\"_blank\" rel=\"noopener\">简单使用步骤在这</a></p>\n<p>这里是官方14天试用版的<a href=\"http://www.3dsom.com/free-trial/\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n<p>第三个是我最后决定用来人脸建模的软件FaceGen Modeller，在人脸建模方面可以说很好用了，估计在这也是网上能找到的最好用的了吧。这个软件可以直接随机生成人脸也可以根据你的照片生成真人的人脸模型，人脸模型的生成需要人脸的三张照片，正面和左右两面，然后按照软件示例中的人脸对人脸的特征点进行定位，普通电脑经过10左右就能生成人脸模型了。最后出来的模型和真人没什么区别，反正熟人一看就知道是你。人脸建模方面，强烈推荐使用。使用步骤简单不做详细的阐述了。<br><img src=\"https://img-blog.csdnimg.cn/20190408210706800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx,size_16,color_FFFFFF,t_70\" alt=\"这是一个图片\"></p>\n","site":{"data":{}},"excerpt":"<p>最近接触了三维打印机，学了两天3Dmax建模，打印了一个简单的手机壳，形状倒是很漂亮不过还是没达到理想的效果。</p>","more":"<p>设想如果打印机能把我的人脸模型打印出来岂不是更完美了，毕竟这都是电影里才有的画面，真要让我完成了，哈哈！！！于是想方设法开始找人脸三维建模软件，找了好多软件有手机APP，也有PC程序。这里简单介绍几个比较好用的软件。</p>\n<p>先从简单的开始吧，首先是一个APP，Qlone.可以很方便的直接用手机围着建模物体转几圈就能把模型建出来，而且自己感觉模型的相似度很高。不过前提是你要把物体放在官方提供的二维码上面，软件才能识别出来物体进行建模。同样一个更大的缺点是如果想要导出模型的或需要付费。。。这对我简直是致命的缺点，我也是因此直接卸载。所以不多说了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190408201714823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx,size_16,color_FFFFFF,t_70\" alt=\"这是一个图片\"><br>第二个是PC端软件，3DSOM Pro v5，软件的官网对软件有着高度的评价，官网也给处理示例或模型。需要对准一个物体进行360的无死角的拍照，最后将所有照片上传到该软件进行建模。按照步骤一步步来，我拍摄了30多张照片，最后软件只识别13张，其余的都作废了，上传完后还要对所有的图片逐个进行边缘的分离，人工处理（很累，费眼神）。经过大约20-30分钟的等待后模型就能建出来了，过程很是曲折，不过模型确实是有点意思，当然不是很完美。3DSOM的建模方法让我想到了科幻电影特效制作过程中，在整个绿色幕布下拍摄建模的方法，感觉很是类似。</p>\n<p>该软件的中文资料较少，<a href=\"https://blog.csdn.net/qq_41281601/article/details/89107267\" target=\"_blank\" rel=\"noopener\">简单使用步骤在这</a></p>\n<p>这里是官方14天试用版的<a href=\"http://www.3dsom.com/free-trial/\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n<p>第三个是我最后决定用来人脸建模的软件FaceGen Modeller，在人脸建模方面可以说很好用了，估计在这也是网上能找到的最好用的了吧。这个软件可以直接随机生成人脸也可以根据你的照片生成真人的人脸模型，人脸模型的生成需要人脸的三张照片，正面和左右两面，然后按照软件示例中的人脸对人脸的特征点进行定位，普通电脑经过10左右就能生成人脸模型了。最后出来的模型和真人没什么区别，反正熟人一看就知道是你。人脸建模方面，强烈推荐使用。使用步骤简单不做详细的阐述了。<br><img src=\"https://img-blog.csdnimg.cn/20190408210706800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx,size_16,color_FFFFFF,t_70\" alt=\"这是一个图片\"></p>"},{"title":"博客搬家大更新啦","date":"2020-01-31T06:57:15.000Z","top":"从本人CSDN搬移部分博客至此博客","_content":"","source":"_posts/top/top.md","raw":"---\ntitle: 博客搬家大更新啦\ndate: 2020-01-31 06:57:15\ntop: 从本人CSDN搬移部分博客至此博客\n---\n","slug":"top/top","published":1,"updated":"2020-01-31T07:11:17.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6aem3zw0007v251fvpu3a6x","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"手机语音助手控制自己开发的物联网设备方法","date":"2020-02-06T03:37:30.000Z","_content":"\n市面上可以买到的物联网设备多种多样，而现有的提供商小米，百度，天猫等基本都是各玩各的，没有同意的设备接入控制的标准协议。所以开发者如果自行开发了一款设备没有同意的标准协议可以遵循，除非是调用厂商提供提供的SDK（实际还是按照他们的自定义协议实现）。那么如何简单实现将用siri或者小爱同学等语音助手控制自己的设备呢？下面总结下目前我了解的方法。\n<!-- more -->\n首先分两种情况一个是Siri，另外是小爱，小度等国内几个大厂商。\n\n## 一，Siri\n\n苹果系统完全可以借助一款APP“捷径”，这个APP是可以自定义语音指令，然后执行特定的脚本的，这就非常方便了。\n\n 1. 比如用的比较多的物联网终端控制器ESP8266，源代码提供通过访问ESP8266的IP加引脚号控制引脚高低电平的方法。例如新建捷径指令“打开灯”，捷径指令执行访问你的ESP8266的ip加引脚号的URL就可以实现控制某个引脚的高低电平，相当于可以控制某个开关信号了，具体收到这个开关信号之后的实现逻辑你就可以自定义实现了。\n 2. 另外的场景（控制板非ESP8266），这个也是比较常用的到的场景。目前我的解决办法是在自己家搭建一个运行Linux的服务端，开机ssh服务，然后通过捷径，运行脚本登录SSH的方式，直接控制你的Linux服务端执行某个特定的脚本，脚本的内容就可以是具体的控制你的某个设备了。\n![图片链接](https://img-blog.csdnimg.cn/20200206111754460.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx,size_8,color_FFFFFF,t_70)\n另外的话第二种方法相比第一种还有一个好处就是，你可以为你的服务端绑定域名,这样的话就可以实现远程ssh,这样不必在同一网络内，在任何地方你都可以通过siri控制你的设备了。\n\n## 二，小爱小度等\n除了Siri之外，现在用的比较多的就是小爱同学了，想想你自己可以直接通过家里的小爱音箱控制自己开发的设备是不是也不错，这里可以关注下“点灯科技”。简单介绍下这个平台集成了目前使用广泛的语音平台，提供不同厂家的协议SDK，跳过了直接使用原厂商SDK的种种限制，比如接入小爱同学需要你有自己的服务器外，还需要有自己的APP，账号体系等等。\n\n只需要将对应平台的SDK下载到自己的设备，设备本身实现对应的回调函数即可实现语音控制功能，不过从官网看目前该平台提供的免费版仅仅支持控制灯，传感器和插座开关，具体的实现方案点灯的官网也给出了较为详细的步骤。\n","source":"_posts/embedded/VoiceAssistant/VoiceAssistant.md","raw":"---\ntitle: 手机语音助手控制自己开发的物联网设备方法\ncategories:\n  - 嵌入式\n  - 语音助手\ntags:\n  - 语音助手 \n  - Siri\ndate: 2020-02-06 03:37:30\n---\n\n市面上可以买到的物联网设备多种多样，而现有的提供商小米，百度，天猫等基本都是各玩各的，没有同意的设备接入控制的标准协议。所以开发者如果自行开发了一款设备没有同意的标准协议可以遵循，除非是调用厂商提供提供的SDK（实际还是按照他们的自定义协议实现）。那么如何简单实现将用siri或者小爱同学等语音助手控制自己的设备呢？下面总结下目前我了解的方法。\n<!-- more -->\n首先分两种情况一个是Siri，另外是小爱，小度等国内几个大厂商。\n\n## 一，Siri\n\n苹果系统完全可以借助一款APP“捷径”，这个APP是可以自定义语音指令，然后执行特定的脚本的，这就非常方便了。\n\n 1. 比如用的比较多的物联网终端控制器ESP8266，源代码提供通过访问ESP8266的IP加引脚号控制引脚高低电平的方法。例如新建捷径指令“打开灯”，捷径指令执行访问你的ESP8266的ip加引脚号的URL就可以实现控制某个引脚的高低电平，相当于可以控制某个开关信号了，具体收到这个开关信号之后的实现逻辑你就可以自定义实现了。\n 2. 另外的场景（控制板非ESP8266），这个也是比较常用的到的场景。目前我的解决办法是在自己家搭建一个运行Linux的服务端，开机ssh服务，然后通过捷径，运行脚本登录SSH的方式，直接控制你的Linux服务端执行某个特定的脚本，脚本的内容就可以是具体的控制你的某个设备了。\n![图片链接](https://img-blog.csdnimg.cn/20200206111754460.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx,size_8,color_FFFFFF,t_70)\n另外的话第二种方法相比第一种还有一个好处就是，你可以为你的服务端绑定域名,这样的话就可以实现远程ssh,这样不必在同一网络内，在任何地方你都可以通过siri控制你的设备了。\n\n## 二，小爱小度等\n除了Siri之外，现在用的比较多的就是小爱同学了，想想你自己可以直接通过家里的小爱音箱控制自己开发的设备是不是也不错，这里可以关注下“点灯科技”。简单介绍下这个平台集成了目前使用广泛的语音平台，提供不同厂家的协议SDK，跳过了直接使用原厂商SDK的种种限制，比如接入小爱同学需要你有自己的服务器外，还需要有自己的APP，账号体系等等。\n\n只需要将对应平台的SDK下载到自己的设备，设备本身实现对应的回调函数即可实现语音控制功能，不过从官网看目前该平台提供的免费版仅仅支持控制灯，传感器和插座开关，具体的实现方案点灯的官网也给出了较为详细的步骤。\n","slug":"embedded/VoiceAssistant/VoiceAssistant","published":1,"updated":"2020-02-06T03:52:48.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6aem41o000ev251hji5aeu4","content":"<p>市面上可以买到的物联网设备多种多样，而现有的提供商小米，百度，天猫等基本都是各玩各的，没有同意的设备接入控制的标准协议。所以开发者如果自行开发了一款设备没有同意的标准协议可以遵循，除非是调用厂商提供提供的SDK（实际还是按照他们的自定义协议实现）。那么如何简单实现将用siri或者小爱同学等语音助手控制自己的设备呢？下面总结下目前我了解的方法。</p>\n<a id=\"more\"></a>\n<p>首先分两种情况一个是Siri，另外是小爱，小度等国内几个大厂商。</p>\n<h2 id=\"一，Siri\"><a href=\"#一，Siri\" class=\"headerlink\" title=\"一，Siri\"></a>一，Siri</h2><p>苹果系统完全可以借助一款APP“捷径”，这个APP是可以自定义语音指令，然后执行特定的脚本的，这就非常方便了。</p>\n<ol>\n<li>比如用的比较多的物联网终端控制器ESP8266，源代码提供通过访问ESP8266的IP加引脚号控制引脚高低电平的方法。例如新建捷径指令“打开灯”，捷径指令执行访问你的ESP8266的ip加引脚号的URL就可以实现控制某个引脚的高低电平，相当于可以控制某个开关信号了，具体收到这个开关信号之后的实现逻辑你就可以自定义实现了。</li>\n<li>另外的场景（控制板非ESP8266），这个也是比较常用的到的场景。目前我的解决办法是在自己家搭建一个运行Linux的服务端，开机ssh服务，然后通过捷径，运行脚本登录SSH的方式，直接控制你的Linux服务端执行某个特定的脚本，脚本的内容就可以是具体的控制你的某个设备了。<br><img src=\"https://img-blog.csdnimg.cn/20200206111754460.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx,size_8,color_FFFFFF,t_70\" alt=\"图片链接\"><br>另外的话第二种方法相比第一种还有一个好处就是，你可以为你的服务端绑定域名,这样的话就可以实现远程ssh,这样不必在同一网络内，在任何地方你都可以通过siri控制你的设备了。</li>\n</ol>\n<h2 id=\"二，小爱小度等\"><a href=\"#二，小爱小度等\" class=\"headerlink\" title=\"二，小爱小度等\"></a>二，小爱小度等</h2><p>除了Siri之外，现在用的比较多的就是小爱同学了，想想你自己可以直接通过家里的小爱音箱控制自己开发的设备是不是也不错，这里可以关注下“点灯科技”。简单介绍下这个平台集成了目前使用广泛的语音平台，提供不同厂家的协议SDK，跳过了直接使用原厂商SDK的种种限制，比如接入小爱同学需要你有自己的服务器外，还需要有自己的APP，账号体系等等。</p>\n<p>只需要将对应平台的SDK下载到自己的设备，设备本身实现对应的回调函数即可实现语音控制功能，不过从官网看目前该平台提供的免费版仅仅支持控制灯，传感器和插座开关，具体的实现方案点灯的官网也给出了较为详细的步骤。</p>\n","site":{"data":{}},"excerpt":"<p>市面上可以买到的物联网设备多种多样，而现有的提供商小米，百度，天猫等基本都是各玩各的，没有同意的设备接入控制的标准协议。所以开发者如果自行开发了一款设备没有同意的标准协议可以遵循，除非是调用厂商提供提供的SDK（实际还是按照他们的自定义协议实现）。那么如何简单实现将用siri或者小爱同学等语音助手控制自己的设备呢？下面总结下目前我了解的方法。</p>","more":"<p>首先分两种情况一个是Siri，另外是小爱，小度等国内几个大厂商。</p>\n<h2 id=\"一，Siri\"><a href=\"#一，Siri\" class=\"headerlink\" title=\"一，Siri\"></a>一，Siri</h2><p>苹果系统完全可以借助一款APP“捷径”，这个APP是可以自定义语音指令，然后执行特定的脚本的，这就非常方便了。</p>\n<ol>\n<li>比如用的比较多的物联网终端控制器ESP8266，源代码提供通过访问ESP8266的IP加引脚号控制引脚高低电平的方法。例如新建捷径指令“打开灯”，捷径指令执行访问你的ESP8266的ip加引脚号的URL就可以实现控制某个引脚的高低电平，相当于可以控制某个开关信号了，具体收到这个开关信号之后的实现逻辑你就可以自定义实现了。</li>\n<li>另外的场景（控制板非ESP8266），这个也是比较常用的到的场景。目前我的解决办法是在自己家搭建一个运行Linux的服务端，开机ssh服务，然后通过捷径，运行脚本登录SSH的方式，直接控制你的Linux服务端执行某个特定的脚本，脚本的内容就可以是具体的控制你的某个设备了。<br><img src=\"https://img-blog.csdnimg.cn/20200206111754460.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx,size_8,color_FFFFFF,t_70\" alt=\"图片链接\"><br>另外的话第二种方法相比第一种还有一个好处就是，你可以为你的服务端绑定域名,这样的话就可以实现远程ssh,这样不必在同一网络内，在任何地方你都可以通过siri控制你的设备了。</li>\n</ol>\n<h2 id=\"二，小爱小度等\"><a href=\"#二，小爱小度等\" class=\"headerlink\" title=\"二，小爱小度等\"></a>二，小爱小度等</h2><p>除了Siri之外，现在用的比较多的就是小爱同学了，想想你自己可以直接通过家里的小爱音箱控制自己开发的设备是不是也不错，这里可以关注下“点灯科技”。简单介绍下这个平台集成了目前使用广泛的语音平台，提供不同厂家的协议SDK，跳过了直接使用原厂商SDK的种种限制，比如接入小爱同学需要你有自己的服务器外，还需要有自己的APP，账号体系等等。</p>\n<p>只需要将对应平台的SDK下载到自己的设备，设备本身实现对应的回调函数即可实现语音控制功能，不过从官网看目前该平台提供的免费版仅仅支持控制灯，传感器和插座开关，具体的实现方案点灯的官网也给出了较为详细的步骤。</p>"},{"title":"搭建自己的嵌入式博客服务器（一）","date":"2020-01-31T03:41:14.000Z","_content":"首先介绍下我搭建自己的博客服务器的背景\n\t前段时间逛知乎时看到某位技术大声，将自己的博客搭建在树莓派上，瞬间引起了我的兴趣，毕竟谁不想拥有一个完全属于自己的博客呀。于是就开始准备了，从网上前人的经验得出现有的搭建方案大致如下：\n<!-- more -->\n - linux --操作系统\n - Apache --http服务\n - mysql --数据库管理\n - PHP --后端编程语言\n - 花生壳 --内网穿透工具\n \n 不过由于实现过程中的一些问题，我最终的实现方案是下面这个样子\n \n - linux --操作系统\n - Apache --http服务\n - Hexo --静态网页生成\n - Natfrp --内网穿透工具\n 这里还要介绍下我用的开发板 友善NEO 1GRAM\n\n博客的最终的实现效果[我的博客](http://linzhipeng.top)\n接下里我将分章节简单介绍些搭建步骤\n","source":"_posts/embedded/blogServer/blogServer1.md","raw":"---\ntitle: 搭建自己的嵌入式博客服务器（一）\ncategories:\n  - 嵌入式\n  - 博客服务\ntags:\n  - Hexo\n  - 嵌入式\n  - 博客服务\ndate: 2020-01-31 03:41:14\n---\n首先介绍下我搭建自己的博客服务器的背景\n\t前段时间逛知乎时看到某位技术大声，将自己的博客搭建在树莓派上，瞬间引起了我的兴趣，毕竟谁不想拥有一个完全属于自己的博客呀。于是就开始准备了，从网上前人的经验得出现有的搭建方案大致如下：\n<!-- more -->\n - linux --操作系统\n - Apache --http服务\n - mysql --数据库管理\n - PHP --后端编程语言\n - 花生壳 --内网穿透工具\n \n 不过由于实现过程中的一些问题，我最终的实现方案是下面这个样子\n \n - linux --操作系统\n - Apache --http服务\n - Hexo --静态网页生成\n - Natfrp --内网穿透工具\n 这里还要介绍下我用的开发板 友善NEO 1GRAM\n\n博客的最终的实现效果[我的博客](http://linzhipeng.top)\n接下里我将分章节简单介绍些搭建步骤\n","slug":"embedded/blogServer/blogServer1","published":1,"updated":"2020-01-31T06:15:33.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6aem41w000fv251hygx569u","content":"<p>首先介绍下我搭建自己的博客服务器的背景<br>    前段时间逛知乎时看到某位技术大声，将自己的博客搭建在树莓派上，瞬间引起了我的兴趣，毕竟谁不想拥有一个完全属于自己的博客呀。于是就开始准备了，从网上前人的经验得出现有的搭建方案大致如下：</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>linux –操作系统</p>\n</li>\n<li><p>Apache –http服务</p>\n</li>\n<li><p>mysql –数据库管理</p>\n</li>\n<li><p>PHP –后端编程语言</p>\n</li>\n<li><p>花生壳 –内网穿透工具</p>\n<p>不过由于实现过程中的一些问题，我最终的实现方案是下面这个样子</p>\n</li>\n<li><p>linux –操作系统</p>\n</li>\n<li><p>Apache –http服务</p>\n</li>\n<li><p>Hexo –静态网页生成</p>\n</li>\n<li><p>Natfrp –内网穿透工具<br>这里还要介绍下我用的开发板 友善NEO 1GRAM</p>\n</li>\n</ul>\n<p>博客的最终的实现效果<a href=\"http://linzhipeng.top\" target=\"_blank\" rel=\"noopener\">我的博客</a><br>接下里我将分章节简单介绍些搭建步骤</p>\n","site":{"data":{}},"excerpt":"<p>首先介绍下我搭建自己的博客服务器的背景<br>    前段时间逛知乎时看到某位技术大声，将自己的博客搭建在树莓派上，瞬间引起了我的兴趣，毕竟谁不想拥有一个完全属于自己的博客呀。于是就开始准备了，从网上前人的经验得出现有的搭建方案大致如下：</p>","more":"<ul>\n<li><p>linux –操作系统</p>\n</li>\n<li><p>Apache –http服务</p>\n</li>\n<li><p>mysql –数据库管理</p>\n</li>\n<li><p>PHP –后端编程语言</p>\n</li>\n<li><p>花生壳 –内网穿透工具</p>\n<p>不过由于实现过程中的一些问题，我最终的实现方案是下面这个样子</p>\n</li>\n<li><p>linux –操作系统</p>\n</li>\n<li><p>Apache –http服务</p>\n</li>\n<li><p>Hexo –静态网页生成</p>\n</li>\n<li><p>Natfrp –内网穿透工具<br>这里还要介绍下我用的开发板 友善NEO 1GRAM</p>\n</li>\n</ul>\n<p>博客的最终的实现效果<a href=\"http://linzhipeng.top\" target=\"_blank\" rel=\"noopener\">我的博客</a><br>接下里我将分章节简单介绍些搭建步骤</p>"},{"title":"搭建自己的嵌入式博客服务器（二）环境搭建","date":"2020-01-31T05:15:17.000Z","_content":"本篇简单介绍几个环境的搭建，包括node，Apache, hexo\n<!-- more -->\n## node.js和npm\n这里使用的是Ubantu操作系统，其他Linux系统同理， (npm是node.js的包管理工具，随同node.js一同下载)\n 1. 安装curl.\n```powershell\nsudo apt-get install curl \ncurl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\n```\n 2. 安装nodejs和npm\n\n```powershell\nsudo    apt-get    install    nodejs-legacy\nsudo    apt-get    install    npm\n```\n\n（1）安装用于安装nodejs的模块n\n\n```powershell\nsudo    npm    install    -g    n\n```\n\n（2）通过n模块安装指定的nodejs\n\n```powershell\nsudo    n    latest\nsudo    n    stable\nsudo    n    lts\n```\n\n（3）升级npm为最新版本\n\n```powershell\nsudo    npm    install    npm@latest    -g\n```\n\n 3. 确认\n\n最后通过node -v ,npm -v确认版本，nodejs版本要在6.3以上才可以\n\n接下来在bin下面创建个软连接\n\n```powershell\n/usr/local/bin/\nln -s /opt/node-v8.11.1-linux-x64/bin/hexo\n```\n\n## Apache2\n 1. 下载\n\n```powershell\nsudo apt-get update\nsudo apt-get install apache2\n```\n\n 2. 环境配置\n （1）/etc/apache2/apache2.conf 是主要配置文件(这个文件的末尾可以看到，include了其它所有的配置文件)。\n（2）/etc/apache2/ports.conf 始终包含在主配置文件中。它用于确定传入连接的侦听端口，默认为80，我们一般都会重新配置新的端口。\n（3）apache2的默认web目录：/var/www/html。（在/etc/apache2/sites-enabled/000-default.conf 里可以看到这个 DocumentRoot /var/www/html 配置）\n（4）设置默认主页的配置文件/etc/apache2/mods-enabled/dir.conf\n（5）进入到/etc/apache2/sites-available目录下，添加ErrorDocument 404 /404.html，在这里，你的404.html要在DocumentRoot 即可实现自定义404页面\n按照自己的需求，配置上面的几个文件即可\n 3. 开关\n\n```powershell\nsudo /etc/init.d/apache2 [ start | stop | restart | status ]\nservice apache2 [ start | stop | restart | status ]\n```\n\n 4. 验证\n 在浏览器输入IP：端口号验证HTTP服务是否正常\n 正常则会显示Ubantu系统默认http服务网页\n\n## Hexo\n\n 1. 安装\n \n```powershell\nsudo npm install hexo-cli -g\n```\n 2. 配置并初始化\n \n\n```powershell\nhexo init blog\ncd blog\nnpm install\nhexo server\n```\n执行完上面几条命令之后，在浏览器打开地址：http://localhost:4000/就会看到hexo为你提供的默认主题，则表示安装成功。\n到 [hexo官网](https://hexo.io/themes/) 找个适合自己的主题。下载主题源码到  博客目录/themes/\n具体的如何更改hexo主题，生成页面和文章可以参考[官方文档](https://hexo.io/docs/writing.html)\n\n","source":"_posts/embedded/blogServer/blogServer2.md","raw":"---\ntitle: 搭建自己的嵌入式博客服务器（二）环境搭建\ncategories:\n  - 嵌入式\n  - 博客服务\ntags:\n  - Hexo\n  - 嵌入式\n  - 博客服务\ndate: 2020-01-31 05:15:17\n---\n本篇简单介绍几个环境的搭建，包括node，Apache, hexo\n<!-- more -->\n## node.js和npm\n这里使用的是Ubantu操作系统，其他Linux系统同理， (npm是node.js的包管理工具，随同node.js一同下载)\n 1. 安装curl.\n```powershell\nsudo apt-get install curl \ncurl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\n```\n 2. 安装nodejs和npm\n\n```powershell\nsudo    apt-get    install    nodejs-legacy\nsudo    apt-get    install    npm\n```\n\n（1）安装用于安装nodejs的模块n\n\n```powershell\nsudo    npm    install    -g    n\n```\n\n（2）通过n模块安装指定的nodejs\n\n```powershell\nsudo    n    latest\nsudo    n    stable\nsudo    n    lts\n```\n\n（3）升级npm为最新版本\n\n```powershell\nsudo    npm    install    npm@latest    -g\n```\n\n 3. 确认\n\n最后通过node -v ,npm -v确认版本，nodejs版本要在6.3以上才可以\n\n接下来在bin下面创建个软连接\n\n```powershell\n/usr/local/bin/\nln -s /opt/node-v8.11.1-linux-x64/bin/hexo\n```\n\n## Apache2\n 1. 下载\n\n```powershell\nsudo apt-get update\nsudo apt-get install apache2\n```\n\n 2. 环境配置\n （1）/etc/apache2/apache2.conf 是主要配置文件(这个文件的末尾可以看到，include了其它所有的配置文件)。\n（2）/etc/apache2/ports.conf 始终包含在主配置文件中。它用于确定传入连接的侦听端口，默认为80，我们一般都会重新配置新的端口。\n（3）apache2的默认web目录：/var/www/html。（在/etc/apache2/sites-enabled/000-default.conf 里可以看到这个 DocumentRoot /var/www/html 配置）\n（4）设置默认主页的配置文件/etc/apache2/mods-enabled/dir.conf\n（5）进入到/etc/apache2/sites-available目录下，添加ErrorDocument 404 /404.html，在这里，你的404.html要在DocumentRoot 即可实现自定义404页面\n按照自己的需求，配置上面的几个文件即可\n 3. 开关\n\n```powershell\nsudo /etc/init.d/apache2 [ start | stop | restart | status ]\nservice apache2 [ start | stop | restart | status ]\n```\n\n 4. 验证\n 在浏览器输入IP：端口号验证HTTP服务是否正常\n 正常则会显示Ubantu系统默认http服务网页\n\n## Hexo\n\n 1. 安装\n \n```powershell\nsudo npm install hexo-cli -g\n```\n 2. 配置并初始化\n \n\n```powershell\nhexo init blog\ncd blog\nnpm install\nhexo server\n```\n执行完上面几条命令之后，在浏览器打开地址：http://localhost:4000/就会看到hexo为你提供的默认主题，则表示安装成功。\n到 [hexo官网](https://hexo.io/themes/) 找个适合自己的主题。下载主题源码到  博客目录/themes/\n具体的如何更改hexo主题，生成页面和文章可以参考[官方文档](https://hexo.io/docs/writing.html)\n\n","slug":"embedded/blogServer/blogServer2","published":1,"updated":"2020-01-31T06:55:14.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6aem42b000iv2511p1w3mbf","content":"<p>本篇简单介绍几个环境的搭建，包括node，Apache, hexo</p>\n<a id=\"more\"></a>\n<h2 id=\"node-js和npm\"><a href=\"#node-js和npm\" class=\"headerlink\" title=\"node.js和npm\"></a>node.js和npm</h2><p>这里使用的是Ubantu操作系统，其他Linux系统同理， (npm是node.js的包管理工具，随同node.js一同下载)</p>\n<ol>\n<li>安装curl.<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install curl </span><br><span class=\"line\">curl <span class=\"literal\">-sL</span> https://deb.nodesource.com/setup_6.x | sudo <span class=\"literal\">-E</span> bash -</span><br></pre></td></tr></table></figure></li>\n<li>安装nodejs和npm</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo    apt<span class=\"literal\">-get</span>    install    nodejs<span class=\"literal\">-legacy</span></span><br><span class=\"line\">sudo    apt<span class=\"literal\">-get</span>    install    npm</span><br></pre></td></tr></table></figure>\n\n<p>（1）安装用于安装nodejs的模块n</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo    npm    install    <span class=\"literal\">-g</span>    n</span><br></pre></td></tr></table></figure>\n\n<p>（2）通过n模块安装指定的nodejs</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo    n    latest</span><br><span class=\"line\">sudo    n    stable</span><br><span class=\"line\">sudo    n    lts</span><br></pre></td></tr></table></figure>\n\n<p>（3）升级npm为最新版本</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo    npm    install    npm@latest    <span class=\"literal\">-g</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>确认</li>\n</ol>\n<p>最后通过node -v ,npm -v确认版本，nodejs版本要在6.3以上才可以</p>\n<p>接下来在bin下面创建个软连接</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/</span><br><span class=\"line\">ln <span class=\"literal\">-s</span> /opt/node<span class=\"literal\">-v8</span>.<span class=\"number\">11.1</span><span class=\"literal\">-linux</span><span class=\"literal\">-x64</span>/bin/hexo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Apache2\"><a href=\"#Apache2\" class=\"headerlink\" title=\"Apache2\"></a>Apache2</h2><ol>\n<li>下载</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt<span class=\"literal\">-get</span> update</span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install apache2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>环境配置<br>（1）/etc/apache2/apache2.conf 是主要配置文件(这个文件的末尾可以看到，include了其它所有的配置文件)。<br>（2）/etc/apache2/ports.conf 始终包含在主配置文件中。它用于确定传入连接的侦听端口，默认为80，我们一般都会重新配置新的端口。<br>（3）apache2的默认web目录：/var/www/html。（在/etc/apache2/sites-enabled/000-default.conf 里可以看到这个 DocumentRoot /var/www/html 配置）<br>（4）设置默认主页的配置文件/etc/apache2/mods-enabled/dir.conf<br>（5）进入到/etc/apache2/sites-available目录下，添加ErrorDocument 404 /404.html，在这里，你的404.html要在DocumentRoot 即可实现自定义404页面<br>按照自己的需求，配置上面的几个文件即可</li>\n<li>开关</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/apache2 [ <span class=\"type\">start</span> | <span class=\"type\">stop</span> | <span class=\"type\">restart</span> | <span class=\"type\">status</span> ]</span><br><span class=\"line\">service apache2 [ <span class=\"type\">start</span> | <span class=\"type\">stop</span> | <span class=\"type\">restart</span> | <span class=\"type\">status</span> ]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>验证<br>在浏览器输入IP：端口号验证HTTP服务是否正常<br>正常则会显示Ubantu系统默认http服务网页</li>\n</ol>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo<span class=\"literal\">-cli</span> <span class=\"literal\">-g</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置并初始化</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>执行完上面几条命令之后，在浏览器打开地址：<a href=\"http://localhost:4000/就会看到hexo为你提供的默认主题，则表示安装成功。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/就会看到hexo为你提供的默认主题，则表示安装成功。</a><br>到 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo官网</a> 找个适合自己的主题。下载主题源码到  博客目录/themes/<br>具体的如何更改hexo主题，生成页面和文章可以参考<a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n","site":{"data":{}},"excerpt":"<p>本篇简单介绍几个环境的搭建，包括node，Apache, hexo</p>","more":"<h2 id=\"node-js和npm\"><a href=\"#node-js和npm\" class=\"headerlink\" title=\"node.js和npm\"></a>node.js和npm</h2><p>这里使用的是Ubantu操作系统，其他Linux系统同理， (npm是node.js的包管理工具，随同node.js一同下载)</p>\n<ol>\n<li>安装curl.<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install curl </span><br><span class=\"line\">curl <span class=\"literal\">-sL</span> https://deb.nodesource.com/setup_6.x | sudo <span class=\"literal\">-E</span> bash -</span><br></pre></td></tr></table></figure></li>\n<li>安装nodejs和npm</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo    apt<span class=\"literal\">-get</span>    install    nodejs<span class=\"literal\">-legacy</span></span><br><span class=\"line\">sudo    apt<span class=\"literal\">-get</span>    install    npm</span><br></pre></td></tr></table></figure>\n\n<p>（1）安装用于安装nodejs的模块n</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo    npm    install    <span class=\"literal\">-g</span>    n</span><br></pre></td></tr></table></figure>\n\n<p>（2）通过n模块安装指定的nodejs</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo    n    latest</span><br><span class=\"line\">sudo    n    stable</span><br><span class=\"line\">sudo    n    lts</span><br></pre></td></tr></table></figure>\n\n<p>（3）升级npm为最新版本</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo    npm    install    npm@latest    <span class=\"literal\">-g</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>确认</li>\n</ol>\n<p>最后通过node -v ,npm -v确认版本，nodejs版本要在6.3以上才可以</p>\n<p>接下来在bin下面创建个软连接</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/</span><br><span class=\"line\">ln <span class=\"literal\">-s</span> /opt/node<span class=\"literal\">-v8</span>.<span class=\"number\">11.1</span><span class=\"literal\">-linux</span><span class=\"literal\">-x64</span>/bin/hexo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Apache2\"><a href=\"#Apache2\" class=\"headerlink\" title=\"Apache2\"></a>Apache2</h2><ol>\n<li>下载</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt<span class=\"literal\">-get</span> update</span><br><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install apache2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>环境配置<br>（1）/etc/apache2/apache2.conf 是主要配置文件(这个文件的末尾可以看到，include了其它所有的配置文件)。<br>（2）/etc/apache2/ports.conf 始终包含在主配置文件中。它用于确定传入连接的侦听端口，默认为80，我们一般都会重新配置新的端口。<br>（3）apache2的默认web目录：/var/www/html。（在/etc/apache2/sites-enabled/000-default.conf 里可以看到这个 DocumentRoot /var/www/html 配置）<br>（4）设置默认主页的配置文件/etc/apache2/mods-enabled/dir.conf<br>（5）进入到/etc/apache2/sites-available目录下，添加ErrorDocument 404 /404.html，在这里，你的404.html要在DocumentRoot 即可实现自定义404页面<br>按照自己的需求，配置上面的几个文件即可</li>\n<li>开关</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/apache2 [ <span class=\"type\">start</span> | <span class=\"type\">stop</span> | <span class=\"type\">restart</span> | <span class=\"type\">status</span> ]</span><br><span class=\"line\">service apache2 [ <span class=\"type\">start</span> | <span class=\"type\">stop</span> | <span class=\"type\">restart</span> | <span class=\"type\">status</span> ]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>验证<br>在浏览器输入IP：端口号验证HTTP服务是否正常<br>正常则会显示Ubantu系统默认http服务网页</li>\n</ol>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo<span class=\"literal\">-cli</span> <span class=\"literal\">-g</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置并初始化</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>执行完上面几条命令之后，在浏览器打开地址：<a href=\"http://localhost:4000/就会看到hexo为你提供的默认主题，则表示安装成功。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/就会看到hexo为你提供的默认主题，则表示安装成功。</a><br>到 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo官网</a> 找个适合自己的主题。下载主题源码到  博客目录/themes/<br>具体的如何更改hexo主题，生成页面和文章可以参考<a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>"},{"title":"搭建自己的嵌入式博客服务器（三）内网穿透","date":"2020-01-31T05:53:41.000Z","_content":"由于自己的嵌入式设备，是通过自己家的路由器连接接入网络的，而黑心的运营商在我们每次上网时分配给我们的公网IP是变动的。为了实现外网设备访问我们的内网设备，我们不得不使用一个内网穿透穿透工具打通两个设备之间的通信链路。\n而现有的内网穿透工具参差不齐，下面我简单介绍下我试用的三个，都是免费的。\n<!-- more -->\n 1. 花生壳\n优点：自定义域名，不变动\n缺点：没有使用ARM Ubuntu的程序版本\n\n借鉴前人经验，我首先使用的是众所周知的花生壳做为内网穿透工具。可以在花生壳官方域名前加自定义域名而且域名不会变动。但是没有使用我的环境的版本，官网倒是有树莓派的版本和操作文档，尝试使用树莓派的版本在我的环境下验证失败。不过官方的工单服务和客服回复的倒是挺及时的，使用树莓派的同学倒是可以尝试使用下花生壳。[官网链接](https://hsk.oray.com)\n\n 2. Sunny-Ngrok\n 优点：自定义域名，不变动。支持多平台\n 缺点：免费服务器经常崩溃\n \n这个也是前一段时间一直在使用的工具，官方的文档给的很详细，详细到提供开关服务的脚本和自启动，操作也比较简便，不过由于服务器经常崩溃，导致不能正常使用（免费厂崩溃），不过听说付费的服务器也是很稳定的。不差钱的同学可以试下。[官网链接](http://www.ngrok.cc/)\n\n 3. natfrp\n 优点：国外服务器服务稳定，支持多平台\n 缺点：不支持提供域名，需要自己注册域名\n\n这个是最近我才使用的，官方的操作也比较简便，不过官方提供的程序没有给开机自启动和服务开关的脚本，需要自己编写。还有就是需要自己买个域名，在域名解析服务加上natfrp上你注册的服务器的域名。这个使用了两天比较稳定，是我目前正在使用的。[官网链接](https://www.natfrp.com/)\n\n","source":"_posts/embedded/blogServer/blogServer3.md","raw":"---\ntitle: 搭建自己的嵌入式博客服务器（三）内网穿透\ncategories:\n  - 嵌入式\n  - 博客服务\ntags:\n  - Hexo\n  - 嵌入式\n  - 博客服务\ndate: 2020-01-31 05:53:41\n---\n由于自己的嵌入式设备，是通过自己家的路由器连接接入网络的，而黑心的运营商在我们每次上网时分配给我们的公网IP是变动的。为了实现外网设备访问我们的内网设备，我们不得不使用一个内网穿透穿透工具打通两个设备之间的通信链路。\n而现有的内网穿透工具参差不齐，下面我简单介绍下我试用的三个，都是免费的。\n<!-- more -->\n 1. 花生壳\n优点：自定义域名，不变动\n缺点：没有使用ARM Ubuntu的程序版本\n\n借鉴前人经验，我首先使用的是众所周知的花生壳做为内网穿透工具。可以在花生壳官方域名前加自定义域名而且域名不会变动。但是没有使用我的环境的版本，官网倒是有树莓派的版本和操作文档，尝试使用树莓派的版本在我的环境下验证失败。不过官方的工单服务和客服回复的倒是挺及时的，使用树莓派的同学倒是可以尝试使用下花生壳。[官网链接](https://hsk.oray.com)\n\n 2. Sunny-Ngrok\n 优点：自定义域名，不变动。支持多平台\n 缺点：免费服务器经常崩溃\n \n这个也是前一段时间一直在使用的工具，官方的文档给的很详细，详细到提供开关服务的脚本和自启动，操作也比较简便，不过由于服务器经常崩溃，导致不能正常使用（免费厂崩溃），不过听说付费的服务器也是很稳定的。不差钱的同学可以试下。[官网链接](http://www.ngrok.cc/)\n\n 3. natfrp\n 优点：国外服务器服务稳定，支持多平台\n 缺点：不支持提供域名，需要自己注册域名\n\n这个是最近我才使用的，官方的操作也比较简便，不过官方提供的程序没有给开机自启动和服务开关的脚本，需要自己编写。还有就是需要自己买个域名，在域名解析服务加上natfrp上你注册的服务器的域名。这个使用了两天比较稳定，是我目前正在使用的。[官网链接](https://www.natfrp.com/)\n\n","slug":"embedded/blogServer/blogServer3","published":1,"updated":"2020-01-31T06:15:42.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6aem42t000jv251asxnf3fv","content":"<p>由于自己的嵌入式设备，是通过自己家的路由器连接接入网络的，而黑心的运营商在我们每次上网时分配给我们的公网IP是变动的。为了实现外网设备访问我们的内网设备，我们不得不使用一个内网穿透穿透工具打通两个设备之间的通信链路。<br>而现有的内网穿透工具参差不齐，下面我简单介绍下我试用的三个，都是免费的。</p>\n<a id=\"more\"></a>\n<ol>\n<li>花生壳<br>优点：自定义域名，不变动<br>缺点：没有使用ARM Ubuntu的程序版本</li>\n</ol>\n<p>借鉴前人经验，我首先使用的是众所周知的花生壳做为内网穿透工具。可以在花生壳官方域名前加自定义域名而且域名不会变动。但是没有使用我的环境的版本，官网倒是有树莓派的版本和操作文档，尝试使用树莓派的版本在我的环境下验证失败。不过官方的工单服务和客服回复的倒是挺及时的，使用树莓派的同学倒是可以尝试使用下花生壳。<a href=\"https://hsk.oray.com\" target=\"_blank\" rel=\"noopener\">官网链接</a></p>\n<ol start=\"2\">\n<li>Sunny-Ngrok<br>优点：自定义域名，不变动。支持多平台<br>缺点：免费服务器经常崩溃</li>\n</ol>\n<p>这个也是前一段时间一直在使用的工具，官方的文档给的很详细，详细到提供开关服务的脚本和自启动，操作也比较简便，不过由于服务器经常崩溃，导致不能正常使用（免费厂崩溃），不过听说付费的服务器也是很稳定的。不差钱的同学可以试下。<a href=\"http://www.ngrok.cc/\" target=\"_blank\" rel=\"noopener\">官网链接</a></p>\n<ol start=\"3\">\n<li>natfrp<br>优点：国外服务器服务稳定，支持多平台<br>缺点：不支持提供域名，需要自己注册域名</li>\n</ol>\n<p>这个是最近我才使用的，官方的操作也比较简便，不过官方提供的程序没有给开机自启动和服务开关的脚本，需要自己编写。还有就是需要自己买个域名，在域名解析服务加上natfrp上你注册的服务器的域名。这个使用了两天比较稳定，是我目前正在使用的。<a href=\"https://www.natfrp.com/\" target=\"_blank\" rel=\"noopener\">官网链接</a></p>\n","site":{"data":{}},"excerpt":"<p>由于自己的嵌入式设备，是通过自己家的路由器连接接入网络的，而黑心的运营商在我们每次上网时分配给我们的公网IP是变动的。为了实现外网设备访问我们的内网设备，我们不得不使用一个内网穿透穿透工具打通两个设备之间的通信链路。<br>而现有的内网穿透工具参差不齐，下面我简单介绍下我试用的三个，都是免费的。</p>","more":"<ol>\n<li>花生壳<br>优点：自定义域名，不变动<br>缺点：没有使用ARM Ubuntu的程序版本</li>\n</ol>\n<p>借鉴前人经验，我首先使用的是众所周知的花生壳做为内网穿透工具。可以在花生壳官方域名前加自定义域名而且域名不会变动。但是没有使用我的环境的版本，官网倒是有树莓派的版本和操作文档，尝试使用树莓派的版本在我的环境下验证失败。不过官方的工单服务和客服回复的倒是挺及时的，使用树莓派的同学倒是可以尝试使用下花生壳。<a href=\"https://hsk.oray.com\" target=\"_blank\" rel=\"noopener\">官网链接</a></p>\n<ol start=\"2\">\n<li>Sunny-Ngrok<br>优点：自定义域名，不变动。支持多平台<br>缺点：免费服务器经常崩溃</li>\n</ol>\n<p>这个也是前一段时间一直在使用的工具，官方的文档给的很详细，详细到提供开关服务的脚本和自启动，操作也比较简便，不过由于服务器经常崩溃，导致不能正常使用（免费厂崩溃），不过听说付费的服务器也是很稳定的。不差钱的同学可以试下。<a href=\"http://www.ngrok.cc/\" target=\"_blank\" rel=\"noopener\">官网链接</a></p>\n<ol start=\"3\">\n<li>natfrp<br>优点：国外服务器服务稳定，支持多平台<br>缺点：不支持提供域名，需要自己注册域名</li>\n</ol>\n<p>这个是最近我才使用的，官方的操作也比较简便，不过官方提供的程序没有给开机自启动和服务开关的脚本，需要自己编写。还有就是需要自己买个域名，在域名解析服务加上natfrp上你注册的服务器的域名。这个使用了两天比较稳定，是我目前正在使用的。<a href=\"https://www.natfrp.com/\" target=\"_blank\" rel=\"noopener\">官网链接</a></p>"},{"title":"搭建自己的嵌入式博客服务器（四）hexo安装及部署到GitHub","date":"2020-02-06T07:07:54.000Z","_content":"\n到了博客搭建的最后一个阶段，使用hexo框架搭建完全静态博客站点,这里还简单介绍下将博客资源部署到github上的方法。\n<!-- more -->\n# 一，hexo的安装使用\n\n1.安装Hexo\n\n```powershell\nnpm install -g hexo-cli\n```\n\n之后使用hexo -v查看一下版本，版本显示成功则安装成功。\n\n2.使用\n首先要初始化整个模板\n\n```powershell\nhexo init myblog\n```\n\nmyblog是你的的博客文件夹的名称，根据自己的喜好设置 \n\n更新npm\n\n```powershell\nnpm install\n```\n\n这里简单介绍下初始化好的博客文件夹下的几个目录\n\n - node_modules: 相关的依赖不常用 public：存放生成的页面\n - scaffolds：生成文章的一些模板，比如使用hexo    new \"xx\",xx.md\n的默认内容可以通过修改模板来改变 \n\n - source：用来存放你的文章就是 xx.md文件\n - themes：存放主题\n\n常用命令接介绍\n\n```powershell\nhexo clean  //清楚原有的静态缓存\nhexo generate   //重新生成所有的静态网页\nhexo deploy  //部署到相关的平台 例如 github\nhexo new \"xx\"   //生成xx.md,新建文章\n```\n\n# 二，部署到GitHub（可以跳过，部署之后方便备份）\n\n## 1，安装github（linux）\n\n```powershell\nsudo apt-get install git\n```\n\n 用git --version 来查看一下版本,显示版本代表安装成功。\n\n## 2， 部署博客到GitHub\n\n1.新建仓库\n登录GitHub.com，点击New repository，新建仓库\n创建一个和你用户名相同的仓库，仓库名称为 “用户名+.github.io”，这样你的博客才能通过GitHub page访问，GitHub page是GitHub新建项目后为项目建立的私人网站站点，通过 用户名+.github.io 访问时，会显示主目录下的index.html\n\n之后create repository，创建完成。\n\n2.生成SSH添加到GitHub\n\n生成ssh key\n\n```powershell\ngit config --global user.name \"用户名\"\ngit config --global user.email \"邮件地址\"\n```\n\n可以用以下两条，检查一下你有没有输对\n```powershell\ngit config user.name\ngit config user.email\n```\n\n确认输入无误后，然后创建SSH\n\n```powershell\nssh-keygen -t rsa -C \"youremail\"\n```\n\n一路回车，过程中会提示输入一些东西，使用默认配置即可，直接回车。\n\n生成的ssh目录下回有id_rsa私钥和id_rsa.pub公钥，需要把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，公钥私钥匹配成功才能通过git上传你的文件到GitHub上。\n\n在setting中，找到SSH keys的设置选项，点击New SSH key，把你的id_rsa.pub里面的信息复制进去。\n\n```powershell\nssh -T git@github.com\n```\n\n提示（You've successfully authenticated, but GitHub does not provide shell access）,则表示测试成功。\n\n\n3.将hexo部署到GitHub\n\n打开hexo的根目录配置文件 _config.yml，添加以下内容\n\n```powershell\ndeploy:\n  type: git\n  repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n  branch: master\n```\n\n\n要想提交资源到github还需要安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。\n\n```powershell\nnpm install --save hexo-deployer-git\n```\n\n之后就可以使用hexo deploy /hexo d提交了\n\n第一次提时，可能要你输入username和password。\n\n提交成功后可以通过github查看是否提交成功，确认成功后可以通过用户名+.github.io查看你的博客了(注意这里是https)\n","source":"_posts/embedded/blogServer/blogServer4.md","raw":"---\ntitle: 搭建自己的嵌入式博客服务器（四）hexo安装及部署到GitHub\ncategories:\n  - 嵌入式\n  - 博客服务\ntags:\n  - Hexo\n  - 嵌入式\n  - 博客服务\ndate: 2020-02-06 07:07:54\n---\n\n到了博客搭建的最后一个阶段，使用hexo框架搭建完全静态博客站点,这里还简单介绍下将博客资源部署到github上的方法。\n<!-- more -->\n# 一，hexo的安装使用\n\n1.安装Hexo\n\n```powershell\nnpm install -g hexo-cli\n```\n\n之后使用hexo -v查看一下版本，版本显示成功则安装成功。\n\n2.使用\n首先要初始化整个模板\n\n```powershell\nhexo init myblog\n```\n\nmyblog是你的的博客文件夹的名称，根据自己的喜好设置 \n\n更新npm\n\n```powershell\nnpm install\n```\n\n这里简单介绍下初始化好的博客文件夹下的几个目录\n\n - node_modules: 相关的依赖不常用 public：存放生成的页面\n - scaffolds：生成文章的一些模板，比如使用hexo    new \"xx\",xx.md\n的默认内容可以通过修改模板来改变 \n\n - source：用来存放你的文章就是 xx.md文件\n - themes：存放主题\n\n常用命令接介绍\n\n```powershell\nhexo clean  //清楚原有的静态缓存\nhexo generate   //重新生成所有的静态网页\nhexo deploy  //部署到相关的平台 例如 github\nhexo new \"xx\"   //生成xx.md,新建文章\n```\n\n# 二，部署到GitHub（可以跳过，部署之后方便备份）\n\n## 1，安装github（linux）\n\n```powershell\nsudo apt-get install git\n```\n\n 用git --version 来查看一下版本,显示版本代表安装成功。\n\n## 2， 部署博客到GitHub\n\n1.新建仓库\n登录GitHub.com，点击New repository，新建仓库\n创建一个和你用户名相同的仓库，仓库名称为 “用户名+.github.io”，这样你的博客才能通过GitHub page访问，GitHub page是GitHub新建项目后为项目建立的私人网站站点，通过 用户名+.github.io 访问时，会显示主目录下的index.html\n\n之后create repository，创建完成。\n\n2.生成SSH添加到GitHub\n\n生成ssh key\n\n```powershell\ngit config --global user.name \"用户名\"\ngit config --global user.email \"邮件地址\"\n```\n\n可以用以下两条，检查一下你有没有输对\n```powershell\ngit config user.name\ngit config user.email\n```\n\n确认输入无误后，然后创建SSH\n\n```powershell\nssh-keygen -t rsa -C \"youremail\"\n```\n\n一路回车，过程中会提示输入一些东西，使用默认配置即可，直接回车。\n\n生成的ssh目录下回有id_rsa私钥和id_rsa.pub公钥，需要把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，公钥私钥匹配成功才能通过git上传你的文件到GitHub上。\n\n在setting中，找到SSH keys的设置选项，点击New SSH key，把你的id_rsa.pub里面的信息复制进去。\n\n```powershell\nssh -T git@github.com\n```\n\n提示（You've successfully authenticated, but GitHub does not provide shell access）,则表示测试成功。\n\n\n3.将hexo部署到GitHub\n\n打开hexo的根目录配置文件 _config.yml，添加以下内容\n\n```powershell\ndeploy:\n  type: git\n  repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n  branch: master\n```\n\n\n要想提交资源到github还需要安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。\n\n```powershell\nnpm install --save hexo-deployer-git\n```\n\n之后就可以使用hexo deploy /hexo d提交了\n\n第一次提时，可能要你输入username和password。\n\n提交成功后可以通过github查看是否提交成功，确认成功后可以通过用户名+.github.io查看你的博客了(注意这里是https)\n","slug":"embedded/blogServer/blogServer4","published":1,"updated":"2020-02-06T07:15:32.272Z","_id":"ck6aem435000kv2512kkpatkb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>到了博客搭建的最后一个阶段，使用hexo框架搭建完全静态博客站点,这里还简单介绍下将博客资源部署到github上的方法。</p>\n<a id=\"more\"></a>\n<h1 id=\"一，hexo的安装使用\"><a href=\"#一，hexo的安装使用\" class=\"headerlink\" title=\"一，hexo的安装使用\"></a>一，hexo的安装使用</h1><p>1.安装Hexo</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install <span class=\"literal\">-g</span> hexo<span class=\"literal\">-cli</span></span><br></pre></td></tr></table></figure>\n\n<p>之后使用hexo -v查看一下版本，版本显示成功则安装成功。</p>\n<p>2.使用<br>首先要初始化整个模板</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init myblog</span><br></pre></td></tr></table></figure>\n\n<p>myblog是你的的博客文件夹的名称，根据自己的喜好设置 </p>\n<p>更新npm</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>这里简单介绍下初始化好的博客文件夹下的几个目录</p>\n<ul>\n<li><p>node_modules: 相关的依赖不常用 public：存放生成的页面</p>\n</li>\n<li><p>scaffolds：生成文章的一些模板，比如使用hexo    new “xx”,xx.md<br>的默认内容可以通过修改模板来改变 </p>\n</li>\n<li><p>source：用来存放你的文章就是 xx.md文件</p>\n</li>\n<li><p>themes：存放主题</p>\n</li>\n</ul>\n<p>常用命令接介绍</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean  //清楚原有的静态缓存</span><br><span class=\"line\">hexo generate   //重新生成所有的静态网页</span><br><span class=\"line\">hexo deploy  //部署到相关的平台 例如 github</span><br><span class=\"line\">hexo new <span class=\"string\">\"xx\"</span>   //生成xx.md,新建文章</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二，部署到GitHub（可以跳过，部署之后方便备份）\"><a href=\"#二，部署到GitHub（可以跳过，部署之后方便备份）\" class=\"headerlink\" title=\"二，部署到GitHub（可以跳过，部署之后方便备份）\"></a>二，部署到GitHub（可以跳过，部署之后方便备份）</h1><h2 id=\"1，安装github（linux）\"><a href=\"#1，安装github（linux）\" class=\"headerlink\" title=\"1，安装github（linux）\"></a>1，安装github（linux）</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install git</span><br></pre></td></tr></table></figure>\n\n<p> 用git –version 来查看一下版本,显示版本代表安装成功。</p>\n<h2 id=\"2，-部署博客到GitHub\"><a href=\"#2，-部署博客到GitHub\" class=\"headerlink\" title=\"2， 部署博客到GitHub\"></a>2， 部署博客到GitHub</h2><p>1.新建仓库<br>登录GitHub.com，点击New repository，新建仓库<br>创建一个和你用户名相同的仓库，仓库名称为 “用户名+.github.io”，这样你的博客才能通过GitHub page访问，GitHub page是GitHub新建项目后为项目建立的私人网站站点，通过 用户名+.github.io 访问时，会显示主目录下的index.html</p>\n<p>之后create repository，创建完成。</p>\n<p>2.生成SSH添加到GitHub</p>\n<p>生成ssh key</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config -<span class=\"literal\">-global</span> user.name <span class=\"string\">\"用户名\"</span></span><br><span class=\"line\">git config -<span class=\"literal\">-global</span> user.email <span class=\"string\">\"邮件地址\"</span></span><br></pre></td></tr></table></figure>\n\n<p>可以用以下两条，检查一下你有没有输对</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n\n<p>确认输入无误后，然后创建SSH</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh<span class=\"literal\">-keygen</span> <span class=\"literal\">-t</span> rsa <span class=\"literal\">-C</span> <span class=\"string\">\"youremail\"</span></span><br></pre></td></tr></table></figure>\n\n<p>一路回车，过程中会提示输入一些东西，使用默认配置即可，直接回车。</p>\n<p>生成的ssh目录下回有id_rsa私钥和id_rsa.pub公钥，需要把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，公钥私钥匹配成功才能通过git上传你的文件到GitHub上。</p>\n<p>在setting中，找到SSH keys的设置选项，点击New SSH key，把你的id_rsa.pub里面的信息复制进去。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"literal\">-T</span> git@github.com</span><br></pre></td></tr></table></figure>\n\n<p>提示（You’ve successfully authenticated, but GitHub does not provide shell access）,则表示测试成功。</p>\n<p>3.将hexo部署到GitHub</p>\n<p>打开hexo的根目录配置文件 _config.yml，添加以下内容</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n\n<p>要想提交资源到github还需要安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -<span class=\"literal\">-save</span> hexo<span class=\"literal\">-deployer</span><span class=\"literal\">-git</span></span><br></pre></td></tr></table></figure>\n\n<p>之后就可以使用hexo deploy /hexo d提交了</p>\n<p>第一次提时，可能要你输入username和password。</p>\n<p>提交成功后可以通过github查看是否提交成功，确认成功后可以通过用户名+.github.io查看你的博客了(注意这里是https)</p>\n","site":{"data":{}},"excerpt":"<p>到了博客搭建的最后一个阶段，使用hexo框架搭建完全静态博客站点,这里还简单介绍下将博客资源部署到github上的方法。</p>","more":"<h1 id=\"一，hexo的安装使用\"><a href=\"#一，hexo的安装使用\" class=\"headerlink\" title=\"一，hexo的安装使用\"></a>一，hexo的安装使用</h1><p>1.安装Hexo</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install <span class=\"literal\">-g</span> hexo<span class=\"literal\">-cli</span></span><br></pre></td></tr></table></figure>\n\n<p>之后使用hexo -v查看一下版本，版本显示成功则安装成功。</p>\n<p>2.使用<br>首先要初始化整个模板</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init myblog</span><br></pre></td></tr></table></figure>\n\n<p>myblog是你的的博客文件夹的名称，根据自己的喜好设置 </p>\n<p>更新npm</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>这里简单介绍下初始化好的博客文件夹下的几个目录</p>\n<ul>\n<li><p>node_modules: 相关的依赖不常用 public：存放生成的页面</p>\n</li>\n<li><p>scaffolds：生成文章的一些模板，比如使用hexo    new “xx”,xx.md<br>的默认内容可以通过修改模板来改变 </p>\n</li>\n<li><p>source：用来存放你的文章就是 xx.md文件</p>\n</li>\n<li><p>themes：存放主题</p>\n</li>\n</ul>\n<p>常用命令接介绍</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean  //清楚原有的静态缓存</span><br><span class=\"line\">hexo generate   //重新生成所有的静态网页</span><br><span class=\"line\">hexo deploy  //部署到相关的平台 例如 github</span><br><span class=\"line\">hexo new <span class=\"string\">\"xx\"</span>   //生成xx.md,新建文章</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二，部署到GitHub（可以跳过，部署之后方便备份）\"><a href=\"#二，部署到GitHub（可以跳过，部署之后方便备份）\" class=\"headerlink\" title=\"二，部署到GitHub（可以跳过，部署之后方便备份）\"></a>二，部署到GitHub（可以跳过，部署之后方便备份）</h1><h2 id=\"1，安装github（linux）\"><a href=\"#1，安装github（linux）\" class=\"headerlink\" title=\"1，安装github（linux）\"></a>1，安装github（linux）</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt<span class=\"literal\">-get</span> install git</span><br></pre></td></tr></table></figure>\n\n<p> 用git –version 来查看一下版本,显示版本代表安装成功。</p>\n<h2 id=\"2，-部署博客到GitHub\"><a href=\"#2，-部署博客到GitHub\" class=\"headerlink\" title=\"2， 部署博客到GitHub\"></a>2， 部署博客到GitHub</h2><p>1.新建仓库<br>登录GitHub.com，点击New repository，新建仓库<br>创建一个和你用户名相同的仓库，仓库名称为 “用户名+.github.io”，这样你的博客才能通过GitHub page访问，GitHub page是GitHub新建项目后为项目建立的私人网站站点，通过 用户名+.github.io 访问时，会显示主目录下的index.html</p>\n<p>之后create repository，创建完成。</p>\n<p>2.生成SSH添加到GitHub</p>\n<p>生成ssh key</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config -<span class=\"literal\">-global</span> user.name <span class=\"string\">\"用户名\"</span></span><br><span class=\"line\">git config -<span class=\"literal\">-global</span> user.email <span class=\"string\">\"邮件地址\"</span></span><br></pre></td></tr></table></figure>\n\n<p>可以用以下两条，检查一下你有没有输对</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n\n<p>确认输入无误后，然后创建SSH</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh<span class=\"literal\">-keygen</span> <span class=\"literal\">-t</span> rsa <span class=\"literal\">-C</span> <span class=\"string\">\"youremail\"</span></span><br></pre></td></tr></table></figure>\n\n<p>一路回车，过程中会提示输入一些东西，使用默认配置即可，直接回车。</p>\n<p>生成的ssh目录下回有id_rsa私钥和id_rsa.pub公钥，需要把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，公钥私钥匹配成功才能通过git上传你的文件到GitHub上。</p>\n<p>在setting中，找到SSH keys的设置选项，点击New SSH key，把你的id_rsa.pub里面的信息复制进去。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"literal\">-T</span> git@github.com</span><br></pre></td></tr></table></figure>\n\n<p>提示（You’ve successfully authenticated, but GitHub does not provide shell access）,则表示测试成功。</p>\n<p>3.将hexo部署到GitHub</p>\n<p>打开hexo的根目录配置文件 _config.yml，添加以下内容</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n\n<p>要想提交资源到github还需要安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -<span class=\"literal\">-save</span> hexo<span class=\"literal\">-deployer</span><span class=\"literal\">-git</span></span><br></pre></td></tr></table></figure>\n\n<p>之后就可以使用hexo deploy /hexo d提交了</p>\n<p>第一次提时，可能要你输入username和password。</p>\n<p>提交成功后可以通过github查看是否提交成功，确认成功后可以通过用户名+.github.io查看你的博客了(注意这里是https)</p>"},{"title":"stm32硬件I2C实现问题","date":"2020-01-31T07:34:33.000Z","_content":"虽然软件可实现I2C读取三轴传感器数据，但I2C作为一种重要的通信协议是一定要搞清楚问题所在的，SO继续研究之前的问题。（网上传言STM32硬件I2C有问题，但仍然有人实现出来）\n再次启动程序，依旧是停在原来的位置\n<!-- more -->\n![这是一个图片](https://img-blog.csdn.net/20180814174512882?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n等待EV6，网上搜索相关问题好多人都停在了等待EV5上。分析EV5等待问题，主机发送起始信号，没能接受从设备发送的应答，\n\n或者可能都没有发送。此问题应该是接线或IIC初始化代码的问题。\n\n而我此时停在等待EV6，说明已检测到该设备。换句话说从设备已经知道了主设备的存在。却在主设备发送设备地址之后，接受不到从设备的应答信号，自己分析有两种可能，一是设备地址错误，从设备接受到不是自身的设备而地址自然不会应答。二是从设备已应答，而并接受到。在设备地址正确的前提下（前面已经通过例程验证过，前面的文章），思索第二种问题。\n\n网上类似问题网友回应也是繁多，如RCC时钟初始化的问题，检查代码RCC_APB1Periph_I2C1，RCC_APB2Periph_GPIOB均已使能。又如可能i2c1默认引脚被复用，或该引脚没接上拉电阻，而不能开漏输出。将默认PIN6.PIN7重映射后依旧老样子排除该问题。\n\n（重映射函数\n\n```c\nGPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)\n```\n\n）\n\n再一次想到时钟问题，将IIC初始化结构体中的速率该低\n\n原来是400000，也不行\n\n直到在某论坛看到据说可以直接用的程序，打开发现代码并无差别，唯一不同的是，RCC初始化，其代码在主函数开始就初始化了所有的需要用到的时钟包括\n\n,只是初始化位置不同。。。。\n\n终于豁然开朗。\n\n数据读取准确无误。\n\n之后又将初始化程序恢复到原位置发现，程序仍可正确运行，不知何解。\n\n尝试恢复速率发现，恢复成400000后不能读取，程序停滞在等待EV6\n\n2000000等待EV5，1000000等待EV5\n\n只能还设为100000，可以正常工作。\n\n至此可确定STM32硬件I2C真的有问题！！！！\n\n程序只能在10000输出，仅供参考\n\n.h\n\n```c\n#ifndef __I2C_H__\n#define __I2C_H__\n \n#include \"stm32f10x.h\"\n \nvoid I2C_GPIO_Config(void);\nvoid I2C1_Init(void);\nvoid I2C1_Write(u8 addr, u8 data);\nu8 I2C1_Read(u8 nAddr);\n#endif\n```\n\n.c\n\n```c\n#include \"tb_delay.h\"\n#include \"i2c.h\"\nvoid I2C_GPIO_Config()\n{\nGPIO_InitTypeDef GPIO_InitStructure;\nRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);\nGPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;\nGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\nGPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;\nGPIO_Init(GPIOB, &GPIO_InitStructure);\n}\n \nvoid I2C1_Init()\n{\nI2C_InitTypeDef I2C_InitStructure;\nRCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);\nI2C_DeInit(I2C1);\nI2C_InitStructure.I2C_Mode = I2C_Mode_I2C;\nI2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;\nI2C_InitStructure.I2C_OwnAddress1 = 0x77;\nI2C_InitStructure.I2C_Ack = I2C_Ack_Enable;\nI2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;\nI2C_InitStructure.I2C_ClockSpeed = 10000;\nI2C_Init(I2C1, &I2C_InitStructure);\nI2C_Cmd(I2C1, ENABLE);\n}\n \nvoid I2C1_Write(u8 addr, u8 data)\n{\nI2C_AcknowledgeConfig(I2C1,ENABLE); \nI2C_GenerateSTART(I2C1,ENABLE); \nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_MODE_SELECT)){;}//EV5\nI2C_Send7bitAddress(I2C1,0x3a,I2C_Direction_Transmitter); \nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)){;} //EV6\nI2C_SendData(I2C1,addr); \nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_TRANSMITTED)){;} //EV8\nI2C_SendData(I2C1,data);\nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_TRANSMITTED)){;} \nI2C_GenerateSTOP(I2C1,ENABLE); \n}\n \nu8 I2C1_Read(u8 nAddr)\n{\nI2C_AcknowledgeConfig(I2C1,ENABLE); //????\nI2C_GenerateSTART(I2C1,ENABLE); //???????\nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_MODE_SELECT)){;} //??EV5\nI2C_Send7bitAddress(I2C1,0x3a,I2C_Direction_Transmitter); //????????\nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)){;}//??EV6\nI2C_SendData(I2C1,nAddr);//?????\nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_TRANSMITTED)){;} //??EV8\n \nI2C_GenerateSTART(I2C1,ENABLE); //???????\nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_MODE_SELECT)){;} //??EV5\nI2C_Send7bitAddress(I2C1,0x3a,I2C_Direction_Receiver); //???????\nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)){;} //??EV6\nI2C_AcknowledgeConfig(I2C1,DISABLE); //??????\nI2C_GenerateSTOP(I2C1,ENABLE); //???????\nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_RECEIVED)){;} //??EV7\nreturn I2C_ReceiveData(I2C1); //???????\n}\n```","source":"_posts/embedded/stm32/embedded-stm32-hi2c.md","raw":"---\ntitle: stm32硬件I2C实现问题\ncategories:\n  - 嵌入式\n  - stm32\ntags:\n  - stm32\n  - I2C\n  - 单片机\ndate: 2020-01-31 07:34:33\n---\n虽然软件可实现I2C读取三轴传感器数据，但I2C作为一种重要的通信协议是一定要搞清楚问题所在的，SO继续研究之前的问题。（网上传言STM32硬件I2C有问题，但仍然有人实现出来）\n再次启动程序，依旧是停在原来的位置\n<!-- more -->\n![这是一个图片](https://img-blog.csdn.net/20180814174512882?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n等待EV6，网上搜索相关问题好多人都停在了等待EV5上。分析EV5等待问题，主机发送起始信号，没能接受从设备发送的应答，\n\n或者可能都没有发送。此问题应该是接线或IIC初始化代码的问题。\n\n而我此时停在等待EV6，说明已检测到该设备。换句话说从设备已经知道了主设备的存在。却在主设备发送设备地址之后，接受不到从设备的应答信号，自己分析有两种可能，一是设备地址错误，从设备接受到不是自身的设备而地址自然不会应答。二是从设备已应答，而并接受到。在设备地址正确的前提下（前面已经通过例程验证过，前面的文章），思索第二种问题。\n\n网上类似问题网友回应也是繁多，如RCC时钟初始化的问题，检查代码RCC_APB1Periph_I2C1，RCC_APB2Periph_GPIOB均已使能。又如可能i2c1默认引脚被复用，或该引脚没接上拉电阻，而不能开漏输出。将默认PIN6.PIN7重映射后依旧老样子排除该问题。\n\n（重映射函数\n\n```c\nGPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)\n```\n\n）\n\n再一次想到时钟问题，将IIC初始化结构体中的速率该低\n\n原来是400000，也不行\n\n直到在某论坛看到据说可以直接用的程序，打开发现代码并无差别，唯一不同的是，RCC初始化，其代码在主函数开始就初始化了所有的需要用到的时钟包括\n\n,只是初始化位置不同。。。。\n\n终于豁然开朗。\n\n数据读取准确无误。\n\n之后又将初始化程序恢复到原位置发现，程序仍可正确运行，不知何解。\n\n尝试恢复速率发现，恢复成400000后不能读取，程序停滞在等待EV6\n\n2000000等待EV5，1000000等待EV5\n\n只能还设为100000，可以正常工作。\n\n至此可确定STM32硬件I2C真的有问题！！！！\n\n程序只能在10000输出，仅供参考\n\n.h\n\n```c\n#ifndef __I2C_H__\n#define __I2C_H__\n \n#include \"stm32f10x.h\"\n \nvoid I2C_GPIO_Config(void);\nvoid I2C1_Init(void);\nvoid I2C1_Write(u8 addr, u8 data);\nu8 I2C1_Read(u8 nAddr);\n#endif\n```\n\n.c\n\n```c\n#include \"tb_delay.h\"\n#include \"i2c.h\"\nvoid I2C_GPIO_Config()\n{\nGPIO_InitTypeDef GPIO_InitStructure;\nRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);\nGPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;\nGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\nGPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;\nGPIO_Init(GPIOB, &GPIO_InitStructure);\n}\n \nvoid I2C1_Init()\n{\nI2C_InitTypeDef I2C_InitStructure;\nRCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);\nI2C_DeInit(I2C1);\nI2C_InitStructure.I2C_Mode = I2C_Mode_I2C;\nI2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;\nI2C_InitStructure.I2C_OwnAddress1 = 0x77;\nI2C_InitStructure.I2C_Ack = I2C_Ack_Enable;\nI2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;\nI2C_InitStructure.I2C_ClockSpeed = 10000;\nI2C_Init(I2C1, &I2C_InitStructure);\nI2C_Cmd(I2C1, ENABLE);\n}\n \nvoid I2C1_Write(u8 addr, u8 data)\n{\nI2C_AcknowledgeConfig(I2C1,ENABLE); \nI2C_GenerateSTART(I2C1,ENABLE); \nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_MODE_SELECT)){;}//EV5\nI2C_Send7bitAddress(I2C1,0x3a,I2C_Direction_Transmitter); \nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)){;} //EV6\nI2C_SendData(I2C1,addr); \nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_TRANSMITTED)){;} //EV8\nI2C_SendData(I2C1,data);\nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_TRANSMITTED)){;} \nI2C_GenerateSTOP(I2C1,ENABLE); \n}\n \nu8 I2C1_Read(u8 nAddr)\n{\nI2C_AcknowledgeConfig(I2C1,ENABLE); //????\nI2C_GenerateSTART(I2C1,ENABLE); //???????\nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_MODE_SELECT)){;} //??EV5\nI2C_Send7bitAddress(I2C1,0x3a,I2C_Direction_Transmitter); //????????\nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)){;}//??EV6\nI2C_SendData(I2C1,nAddr);//?????\nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_TRANSMITTED)){;} //??EV8\n \nI2C_GenerateSTART(I2C1,ENABLE); //???????\nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_MODE_SELECT)){;} //??EV5\nI2C_Send7bitAddress(I2C1,0x3a,I2C_Direction_Receiver); //???????\nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)){;} //??EV6\nI2C_AcknowledgeConfig(I2C1,DISABLE); //??????\nI2C_GenerateSTOP(I2C1,ENABLE); //???????\nwhile(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_RECEIVED)){;} //??EV7\nreturn I2C_ReceiveData(I2C1); //???????\n}\n```","slug":"embedded/stm32/embedded-stm32-hi2c","published":1,"updated":"2020-01-31T07:44:02.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6aem43r000nv251h0nz2z7s","content":"<p>虽然软件可实现I2C读取三轴传感器数据，但I2C作为一种重要的通信协议是一定要搞清楚问题所在的，SO继续研究之前的问题。（网上传言STM32硬件I2C有问题，但仍然有人实现出来）<br>再次启动程序，依旧是停在原来的位置</p>\n<a id=\"more\"></a>\n<p><img src=\"https://img-blog.csdn.net/20180814174512882?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这是一个图片\"></p>\n<p>等待EV6，网上搜索相关问题好多人都停在了等待EV5上。分析EV5等待问题，主机发送起始信号，没能接受从设备发送的应答，</p>\n<p>或者可能都没有发送。此问题应该是接线或IIC初始化代码的问题。</p>\n<p>而我此时停在等待EV6，说明已检测到该设备。换句话说从设备已经知道了主设备的存在。却在主设备发送设备地址之后，接受不到从设备的应答信号，自己分析有两种可能，一是设备地址错误，从设备接受到不是自身的设备而地址自然不会应答。二是从设备已应答，而并接受到。在设备地址正确的前提下（前面已经通过例程验证过，前面的文章），思索第二种问题。</p>\n<p>网上类似问题网友回应也是繁多，如RCC时钟初始化的问题，检查代码RCC_APB1Periph_I2C1，RCC_APB2Periph_GPIOB均已使能。又如可能i2c1默认引脚被复用，或该引脚没接上拉电阻，而不能开漏输出。将默认PIN6.PIN7重映射后依旧老样子排除该问题。</p>\n<p>（重映射函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)</span><br></pre></td></tr></table></figure>\n\n<p>）</p>\n<p>再一次想到时钟问题，将IIC初始化结构体中的速率该低</p>\n<p>原来是400000，也不行</p>\n<p>直到在某论坛看到据说可以直接用的程序，打开发现代码并无差别，唯一不同的是，RCC初始化，其代码在主函数开始就初始化了所有的需要用到的时钟包括</p>\n<p>,只是初始化位置不同。。。。</p>\n<p>终于豁然开朗。</p>\n<p>数据读取准确无误。</p>\n<p>之后又将初始化程序恢复到原位置发现，程序仍可正确运行，不知何解。</p>\n<p>尝试恢复速率发现，恢复成400000后不能读取，程序停滞在等待EV6</p>\n<p>2000000等待EV5，1000000等待EV5</p>\n<p>只能还设为100000，可以正常工作。</p>\n<p>至此可确定STM32硬件I2C真的有问题！！！！</p>\n<p>程序只能在10000输出，仅供参考</p>\n<p>.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __I2C_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __I2C_H__</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stm32f10x.h\"</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">I2C_GPIO_Config</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">I2C1_Init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">I2C1_Write</span><span class=\"params\">(u8 addr, u8 data)</span></span>;</span><br><span class=\"line\"><span class=\"function\">u8 <span class=\"title\">I2C1_Read</span><span class=\"params\">(u8 nAddr)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"tb_delay.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"i2c.h\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">I2C_GPIO_Config</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class=\"line\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class=\"line\">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;</span><br><span class=\"line\">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class=\"line\">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;</span><br><span class=\"line\">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">I2C1_Init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">I2C_InitTypeDef I2C_InitStructure;</span><br><span class=\"line\">RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);</span><br><span class=\"line\">I2C_DeInit(I2C1);</span><br><span class=\"line\">I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;</span><br><span class=\"line\">I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;</span><br><span class=\"line\">I2C_InitStructure.I2C_OwnAddress1 = <span class=\"number\">0x77</span>;</span><br><span class=\"line\">I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;</span><br><span class=\"line\">I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;</span><br><span class=\"line\">I2C_InitStructure.I2C_ClockSpeed = <span class=\"number\">10000</span>;</span><br><span class=\"line\">I2C_Init(I2C1, &amp;I2C_InitStructure);</span><br><span class=\"line\">I2C_Cmd(I2C1, ENABLE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">I2C1_Write</span><span class=\"params\">(u8 addr, u8 data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">I2C_AcknowledgeConfig(I2C1,ENABLE); </span><br><span class=\"line\">I2C_GenerateSTART(I2C1,ENABLE); </span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_MODE_SELECT))&#123;;&#125;<span class=\"comment\">//EV5</span></span><br><span class=\"line\">I2C_Send7bitAddress(I2C1,<span class=\"number\">0x3a</span>,I2C_Direction_Transmitter); </span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&#123;;&#125; <span class=\"comment\">//EV6</span></span><br><span class=\"line\">I2C_SendData(I2C1,addr); </span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_TRANSMITTED))&#123;;&#125; <span class=\"comment\">//EV8</span></span><br><span class=\"line\">I2C_SendData(I2C1,data);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_TRANSMITTED))&#123;;&#125; </span><br><span class=\"line\">I2C_GenerateSTOP(I2C1,ENABLE); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">u8 <span class=\"title\">I2C1_Read</span><span class=\"params\">(u8 nAddr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">I2C_AcknowledgeConfig(I2C1,ENABLE); <span class=\"comment\">//????</span></span><br><span class=\"line\">I2C_GenerateSTART(I2C1,ENABLE); <span class=\"comment\">//???????</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_MODE_SELECT))&#123;;&#125; <span class=\"comment\">//??EV5</span></span><br><span class=\"line\">I2C_Send7bitAddress(I2C1,<span class=\"number\">0x3a</span>,I2C_Direction_Transmitter); <span class=\"comment\">//????????</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&#123;;&#125;<span class=\"comment\">//??EV6</span></span><br><span class=\"line\">I2C_SendData(I2C1,nAddr);<span class=\"comment\">//?????</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_TRANSMITTED))&#123;;&#125; <span class=\"comment\">//??EV8</span></span><br><span class=\"line\"> </span><br><span class=\"line\">I2C_GenerateSTART(I2C1,ENABLE); <span class=\"comment\">//???????</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_MODE_SELECT))&#123;;&#125; <span class=\"comment\">//??EV5</span></span><br><span class=\"line\">I2C_Send7bitAddress(I2C1,<span class=\"number\">0x3a</span>,I2C_Direction_Receiver); <span class=\"comment\">//???????</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&#123;;&#125; <span class=\"comment\">//??EV6</span></span><br><span class=\"line\">I2C_AcknowledgeConfig(I2C1,DISABLE); <span class=\"comment\">//??????</span></span><br><span class=\"line\">I2C_GenerateSTOP(I2C1,ENABLE); <span class=\"comment\">//???????</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_RECEIVED))&#123;;&#125; <span class=\"comment\">//??EV7</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> I2C_ReceiveData(I2C1); <span class=\"comment\">//???????</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>虽然软件可实现I2C读取三轴传感器数据，但I2C作为一种重要的通信协议是一定要搞清楚问题所在的，SO继续研究之前的问题。（网上传言STM32硬件I2C有问题，但仍然有人实现出来）<br>再次启动程序，依旧是停在原来的位置</p>","more":"<p><img src=\"https://img-blog.csdn.net/20180814174512882?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这是一个图片\"></p>\n<p>等待EV6，网上搜索相关问题好多人都停在了等待EV5上。分析EV5等待问题，主机发送起始信号，没能接受从设备发送的应答，</p>\n<p>或者可能都没有发送。此问题应该是接线或IIC初始化代码的问题。</p>\n<p>而我此时停在等待EV6，说明已检测到该设备。换句话说从设备已经知道了主设备的存在。却在主设备发送设备地址之后，接受不到从设备的应答信号，自己分析有两种可能，一是设备地址错误，从设备接受到不是自身的设备而地址自然不会应答。二是从设备已应答，而并接受到。在设备地址正确的前提下（前面已经通过例程验证过，前面的文章），思索第二种问题。</p>\n<p>网上类似问题网友回应也是繁多，如RCC时钟初始化的问题，检查代码RCC_APB1Periph_I2C1，RCC_APB2Periph_GPIOB均已使能。又如可能i2c1默认引脚被复用，或该引脚没接上拉电阻，而不能开漏输出。将默认PIN6.PIN7重映射后依旧老样子排除该问题。</p>\n<p>（重映射函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)</span><br></pre></td></tr></table></figure>\n\n<p>）</p>\n<p>再一次想到时钟问题，将IIC初始化结构体中的速率该低</p>\n<p>原来是400000，也不行</p>\n<p>直到在某论坛看到据说可以直接用的程序，打开发现代码并无差别，唯一不同的是，RCC初始化，其代码在主函数开始就初始化了所有的需要用到的时钟包括</p>\n<p>,只是初始化位置不同。。。。</p>\n<p>终于豁然开朗。</p>\n<p>数据读取准确无误。</p>\n<p>之后又将初始化程序恢复到原位置发现，程序仍可正确运行，不知何解。</p>\n<p>尝试恢复速率发现，恢复成400000后不能读取，程序停滞在等待EV6</p>\n<p>2000000等待EV5，1000000等待EV5</p>\n<p>只能还设为100000，可以正常工作。</p>\n<p>至此可确定STM32硬件I2C真的有问题！！！！</p>\n<p>程序只能在10000输出，仅供参考</p>\n<p>.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __I2C_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __I2C_H__</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stm32f10x.h\"</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">I2C_GPIO_Config</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">I2C1_Init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">I2C1_Write</span><span class=\"params\">(u8 addr, u8 data)</span></span>;</span><br><span class=\"line\"><span class=\"function\">u8 <span class=\"title\">I2C1_Read</span><span class=\"params\">(u8 nAddr)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"tb_delay.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"i2c.h\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">I2C_GPIO_Config</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class=\"line\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class=\"line\">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;</span><br><span class=\"line\">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class=\"line\">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;</span><br><span class=\"line\">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">I2C1_Init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">I2C_InitTypeDef I2C_InitStructure;</span><br><span class=\"line\">RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);</span><br><span class=\"line\">I2C_DeInit(I2C1);</span><br><span class=\"line\">I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;</span><br><span class=\"line\">I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;</span><br><span class=\"line\">I2C_InitStructure.I2C_OwnAddress1 = <span class=\"number\">0x77</span>;</span><br><span class=\"line\">I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;</span><br><span class=\"line\">I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;</span><br><span class=\"line\">I2C_InitStructure.I2C_ClockSpeed = <span class=\"number\">10000</span>;</span><br><span class=\"line\">I2C_Init(I2C1, &amp;I2C_InitStructure);</span><br><span class=\"line\">I2C_Cmd(I2C1, ENABLE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">I2C1_Write</span><span class=\"params\">(u8 addr, u8 data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">I2C_AcknowledgeConfig(I2C1,ENABLE); </span><br><span class=\"line\">I2C_GenerateSTART(I2C1,ENABLE); </span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_MODE_SELECT))&#123;;&#125;<span class=\"comment\">//EV5</span></span><br><span class=\"line\">I2C_Send7bitAddress(I2C1,<span class=\"number\">0x3a</span>,I2C_Direction_Transmitter); </span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&#123;;&#125; <span class=\"comment\">//EV6</span></span><br><span class=\"line\">I2C_SendData(I2C1,addr); </span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_TRANSMITTED))&#123;;&#125; <span class=\"comment\">//EV8</span></span><br><span class=\"line\">I2C_SendData(I2C1,data);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_TRANSMITTED))&#123;;&#125; </span><br><span class=\"line\">I2C_GenerateSTOP(I2C1,ENABLE); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">u8 <span class=\"title\">I2C1_Read</span><span class=\"params\">(u8 nAddr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">I2C_AcknowledgeConfig(I2C1,ENABLE); <span class=\"comment\">//????</span></span><br><span class=\"line\">I2C_GenerateSTART(I2C1,ENABLE); <span class=\"comment\">//???????</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_MODE_SELECT))&#123;;&#125; <span class=\"comment\">//??EV5</span></span><br><span class=\"line\">I2C_Send7bitAddress(I2C1,<span class=\"number\">0x3a</span>,I2C_Direction_Transmitter); <span class=\"comment\">//????????</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&#123;;&#125;<span class=\"comment\">//??EV6</span></span><br><span class=\"line\">I2C_SendData(I2C1,nAddr);<span class=\"comment\">//?????</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_TRANSMITTED))&#123;;&#125; <span class=\"comment\">//??EV8</span></span><br><span class=\"line\"> </span><br><span class=\"line\">I2C_GenerateSTART(I2C1,ENABLE); <span class=\"comment\">//???????</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_MODE_SELECT))&#123;;&#125; <span class=\"comment\">//??EV5</span></span><br><span class=\"line\">I2C_Send7bitAddress(I2C1,<span class=\"number\">0x3a</span>,I2C_Direction_Receiver); <span class=\"comment\">//???????</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&#123;;&#125; <span class=\"comment\">//??EV6</span></span><br><span class=\"line\">I2C_AcknowledgeConfig(I2C1,DISABLE); <span class=\"comment\">//??????</span></span><br><span class=\"line\">I2C_GenerateSTOP(I2C1,ENABLE); <span class=\"comment\">//???????</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_RECEIVED))&#123;;&#125; <span class=\"comment\">//??EV7</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> I2C_ReceiveData(I2C1); <span class=\"comment\">//???????</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"记ST_LINK与STM32的连接调试","date":"2020-01-31T07:50:55.000Z","_content":"\n由于先前的32板子不能但不调试，就是不支持JTAG/SWD，平时测试程序只能是编译没问题了就直接下载到板子上，如果想看运行过程中的变量的值只能是靠自己的推测，或者一些自己想出来的土办法（比如用串口打印或者led显示）。\n<!-- more -->\n于是在某宝30多块入手mini32板子加st-link调试器。如图\n\n![图片](https://img-blog.csdn.net/20180809153918724?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n客服不是很专业，给了一些资料就完事了，再问一些问题，一直支支支吾吾的答不上来。只能是自己看资料解决了。\n\n下面将连接流程介绍下：\n\n首先保证连线的准确，这是重中之重，一定要检查清楚。\n\n其次安装客服给的ST-link v2驱动程序，安装过程中的选项默认就好包括路径。\n\n安装完成后插上STLINK打开设备管理器就可以看到STLINK的设备驱动了。\n\n![图片](https://img-blog.csdn.net/20180809154034819?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n现在并不能打开MDK调试，还有另外一步，安装STM32 ST-LINK Utility这里面包括了WIN10 的STlink的驱动解决方案，同样安装过程中的选项默认就好包括路径。\n\n这时如果没有什么大问题就可以用ST-LINK Utility下载可执行文件了，如果可以固件升级却出现这这样的提示：\n\n![图片](https://img-blog.csdn.net/2018080915375675?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n检查插线和主板，这表示ST-LINK连接没问题，问题是找不到主板。\n\nST-LINK Utility运行无误后，表明你的硬件没有一点问题，现在就可以打开MDK（keil）了，只需简单几步：\n\n1：打开项目配置选项卡，点击Debug,配置仿真器为ST-LINK DEBUG,点击setting\n\n![图片](https://img-blog.csdn.net/20180809152550944?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n正常情况下：\n\n![图片](https://img-blog.csdn.net/20180809152730611?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\nSW或者选择JATG，右侧SW/JATG Devise 下回出现id号。。。这种情况下直接点解确定\n\n还有可能会是这种情况：\n\n![图片](https://img-blog.csdn.net/20180809153001133?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n这表示ST-LINK连接无误，而查找不到目标板，请检查插线和主板。\n\n正常后点击Utilities选项卡：\n\n![图片](https://img-blog.csdn.net/20180809153219801?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n同样设置ST-LINK DEBUG 点击Setting\n\n![图片](https://img-blog.csdn.net/20180809153307751?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\nDownload Function 选择第一项，其余默认点击下方ADD\n\n![图片](https://img-blog.csdn.net/20180809153422171?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n选择你的开发板型号。\n\n至此，ST-link调试可以在MDK下下载，单步执行。\n","source":"_posts/embedded/stm32/embedded-stm32-stlink.md","raw":"---\ntitle: 记ST_LINK与STM32的连接调试\ncategories:\n  - 嵌入式\n  - stm32\ntags:\n  - stm32\n  - 调试器\n  - 单片机\ndate: 2020-01-31 07:50:55\n---\n\n由于先前的32板子不能但不调试，就是不支持JTAG/SWD，平时测试程序只能是编译没问题了就直接下载到板子上，如果想看运行过程中的变量的值只能是靠自己的推测，或者一些自己想出来的土办法（比如用串口打印或者led显示）。\n<!-- more -->\n于是在某宝30多块入手mini32板子加st-link调试器。如图\n\n![图片](https://img-blog.csdn.net/20180809153918724?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n客服不是很专业，给了一些资料就完事了，再问一些问题，一直支支支吾吾的答不上来。只能是自己看资料解决了。\n\n下面将连接流程介绍下：\n\n首先保证连线的准确，这是重中之重，一定要检查清楚。\n\n其次安装客服给的ST-link v2驱动程序，安装过程中的选项默认就好包括路径。\n\n安装完成后插上STLINK打开设备管理器就可以看到STLINK的设备驱动了。\n\n![图片](https://img-blog.csdn.net/20180809154034819?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n现在并不能打开MDK调试，还有另外一步，安装STM32 ST-LINK Utility这里面包括了WIN10 的STlink的驱动解决方案，同样安装过程中的选项默认就好包括路径。\n\n这时如果没有什么大问题就可以用ST-LINK Utility下载可执行文件了，如果可以固件升级却出现这这样的提示：\n\n![图片](https://img-blog.csdn.net/2018080915375675?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n检查插线和主板，这表示ST-LINK连接没问题，问题是找不到主板。\n\nST-LINK Utility运行无误后，表明你的硬件没有一点问题，现在就可以打开MDK（keil）了，只需简单几步：\n\n1：打开项目配置选项卡，点击Debug,配置仿真器为ST-LINK DEBUG,点击setting\n\n![图片](https://img-blog.csdn.net/20180809152550944?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n正常情况下：\n\n![图片](https://img-blog.csdn.net/20180809152730611?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\nSW或者选择JATG，右侧SW/JATG Devise 下回出现id号。。。这种情况下直接点解确定\n\n还有可能会是这种情况：\n\n![图片](https://img-blog.csdn.net/20180809153001133?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n这表示ST-LINK连接无误，而查找不到目标板，请检查插线和主板。\n\n正常后点击Utilities选项卡：\n\n![图片](https://img-blog.csdn.net/20180809153219801?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n同样设置ST-LINK DEBUG 点击Setting\n\n![图片](https://img-blog.csdn.net/20180809153307751?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\nDownload Function 选择第一项，其余默认点击下方ADD\n\n![图片](https://img-blog.csdn.net/20180809153422171?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n选择你的开发板型号。\n\n至此，ST-link调试可以在MDK下下载，单步执行。\n","slug":"embedded/stm32/embedded-stm32-stlink","published":1,"updated":"2020-01-31T07:54:44.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6aem440000ov251gmxxd7d0","content":"<p>由于先前的32板子不能但不调试，就是不支持JTAG/SWD，平时测试程序只能是编译没问题了就直接下载到板子上，如果想看运行过程中的变量的值只能是靠自己的推测，或者一些自己想出来的土办法（比如用串口打印或者led显示）。</p>\n<a id=\"more\"></a>\n<p>于是在某宝30多块入手mini32板子加st-link调试器。如图</p>\n<p><img src=\"https://img-blog.csdn.net/20180809153918724?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>客服不是很专业，给了一些资料就完事了，再问一些问题，一直支支支吾吾的答不上来。只能是自己看资料解决了。</p>\n<p>下面将连接流程介绍下：</p>\n<p>首先保证连线的准确，这是重中之重，一定要检查清楚。</p>\n<p>其次安装客服给的ST-link v2驱动程序，安装过程中的选项默认就好包括路径。</p>\n<p>安装完成后插上STLINK打开设备管理器就可以看到STLINK的设备驱动了。</p>\n<p><img src=\"https://img-blog.csdn.net/20180809154034819?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>现在并不能打开MDK调试，还有另外一步，安装STM32 ST-LINK Utility这里面包括了WIN10 的STlink的驱动解决方案，同样安装过程中的选项默认就好包括路径。</p>\n<p>这时如果没有什么大问题就可以用ST-LINK Utility下载可执行文件了，如果可以固件升级却出现这这样的提示：</p>\n<p><img src=\"https://img-blog.csdn.net/2018080915375675?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>检查插线和主板，这表示ST-LINK连接没问题，问题是找不到主板。</p>\n<p>ST-LINK Utility运行无误后，表明你的硬件没有一点问题，现在就可以打开MDK（keil）了，只需简单几步：</p>\n<p>1：打开项目配置选项卡，点击Debug,配置仿真器为ST-LINK DEBUG,点击setting</p>\n<p><img src=\"https://img-blog.csdn.net/20180809152550944?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>正常情况下：</p>\n<p><img src=\"https://img-blog.csdn.net/20180809152730611?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>SW或者选择JATG，右侧SW/JATG Devise 下回出现id号。。。这种情况下直接点解确定</p>\n<p>还有可能会是这种情况：</p>\n<p><img src=\"https://img-blog.csdn.net/20180809153001133?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"><br>这表示ST-LINK连接无误，而查找不到目标板，请检查插线和主板。</p>\n<p>正常后点击Utilities选项卡：</p>\n<p><img src=\"https://img-blog.csdn.net/20180809153219801?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>同样设置ST-LINK DEBUG 点击Setting</p>\n<p><img src=\"https://img-blog.csdn.net/20180809153307751?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>Download Function 选择第一项，其余默认点击下方ADD</p>\n<p><img src=\"https://img-blog.csdn.net/20180809153422171?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>选择你的开发板型号。</p>\n<p>至此，ST-link调试可以在MDK下下载，单步执行。</p>\n","site":{"data":{}},"excerpt":"<p>由于先前的32板子不能但不调试，就是不支持JTAG/SWD，平时测试程序只能是编译没问题了就直接下载到板子上，如果想看运行过程中的变量的值只能是靠自己的推测，或者一些自己想出来的土办法（比如用串口打印或者led显示）。</p>","more":"<p>于是在某宝30多块入手mini32板子加st-link调试器。如图</p>\n<p><img src=\"https://img-blog.csdn.net/20180809153918724?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>客服不是很专业，给了一些资料就完事了，再问一些问题，一直支支支吾吾的答不上来。只能是自己看资料解决了。</p>\n<p>下面将连接流程介绍下：</p>\n<p>首先保证连线的准确，这是重中之重，一定要检查清楚。</p>\n<p>其次安装客服给的ST-link v2驱动程序，安装过程中的选项默认就好包括路径。</p>\n<p>安装完成后插上STLINK打开设备管理器就可以看到STLINK的设备驱动了。</p>\n<p><img src=\"https://img-blog.csdn.net/20180809154034819?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>现在并不能打开MDK调试，还有另外一步，安装STM32 ST-LINK Utility这里面包括了WIN10 的STlink的驱动解决方案，同样安装过程中的选项默认就好包括路径。</p>\n<p>这时如果没有什么大问题就可以用ST-LINK Utility下载可执行文件了，如果可以固件升级却出现这这样的提示：</p>\n<p><img src=\"https://img-blog.csdn.net/2018080915375675?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>检查插线和主板，这表示ST-LINK连接没问题，问题是找不到主板。</p>\n<p>ST-LINK Utility运行无误后，表明你的硬件没有一点问题，现在就可以打开MDK（keil）了，只需简单几步：</p>\n<p>1：打开项目配置选项卡，点击Debug,配置仿真器为ST-LINK DEBUG,点击setting</p>\n<p><img src=\"https://img-blog.csdn.net/20180809152550944?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>正常情况下：</p>\n<p><img src=\"https://img-blog.csdn.net/20180809152730611?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>SW或者选择JATG，右侧SW/JATG Devise 下回出现id号。。。这种情况下直接点解确定</p>\n<p>还有可能会是这种情况：</p>\n<p><img src=\"https://img-blog.csdn.net/20180809153001133?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"><br>这表示ST-LINK连接无误，而查找不到目标板，请检查插线和主板。</p>\n<p>正常后点击Utilities选项卡：</p>\n<p><img src=\"https://img-blog.csdn.net/20180809153219801?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>同样设置ST-LINK DEBUG 点击Setting</p>\n<p><img src=\"https://img-blog.csdn.net/20180809153307751?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>Download Function 选择第一项，其余默认点击下方ADD</p>\n<p><img src=\"https://img-blog.csdn.net/20180809153422171?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjgxNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片\"></p>\n<p>选择你的开发板型号。</p>\n<p>至此，ST-link调试可以在MDK下下载，单步执行。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck6aem3z70006v2516av92fxs","category_id":"ck6aem40b0008v251ctgohlym","_id":"ck6aem414000bv251bg19fbpw"},{"post_id":"ck6aem42t000jv251asxnf3fv","category_id":"ck6aem426000gv251gffp9bg4","_id":"ck6aem455000xv251fh6eaz9e"},{"post_id":"ck6aem42t000jv251asxnf3fv","category_id":"ck6aem44k000sv251eg8k6jjx","_id":"ck6aem45a0010v251adezfww3"},{"post_id":"ck6aem41o000ev251hji5aeu4","category_id":"ck6aem426000gv251gffp9bg4","_id":"ck6aem45f0012v251c0qs93st"},{"post_id":"ck6aem41o000ev251hji5aeu4","category_id":"ck6aem44y000vv2512cs076jd","_id":"ck6aem45n0016v251h5w75wij"},{"post_id":"ck6aem43r000nv251h0nz2z7s","category_id":"ck6aem426000gv251gffp9bg4","_id":"ck6aem460001bv2516f4u5jq2"},{"post_id":"ck6aem43r000nv251h0nz2z7s","category_id":"ck6aem45f0013v2510dpna4sa","_id":"ck6aem467001ev2510r90banu"},{"post_id":"ck6aem41w000fv251hygx569u","category_id":"ck6aem426000gv251gffp9bg4","_id":"ck6aem46b001hv2517p1sbswm"},{"post_id":"ck6aem41w000fv251hygx569u","category_id":"ck6aem44k000sv251eg8k6jjx","_id":"ck6aem46i001kv251gwy8al1g"},{"post_id":"ck6aem440000ov251gmxxd7d0","category_id":"ck6aem426000gv251gffp9bg4","_id":"ck6aem46n001mv2518i3q72gj"},{"post_id":"ck6aem440000ov251gmxxd7d0","category_id":"ck6aem45f0013v2510dpna4sa","_id":"ck6aem46r001ov251d2164ygp"},{"post_id":"ck6aem42b000iv2511p1w3mbf","category_id":"ck6aem426000gv251gffp9bg4","_id":"ck6aem46t001pv2516obxb809"},{"post_id":"ck6aem42b000iv2511p1w3mbf","category_id":"ck6aem44k000sv251eg8k6jjx","_id":"ck6aem46z001sv251h7ocg708"},{"post_id":"ck6aem435000kv2512kkpatkb","category_id":"ck6aem426000gv251gffp9bg4","_id":"ck6aepmco0002to5133jz45lu"},{"post_id":"ck6aem435000kv2512kkpatkb","category_id":"ck6aem44k000sv251eg8k6jjx","_id":"ck6aepmcq0003to51gxfm26n5"}],"PostTag":[{"post_id":"ck6aem3z70006v2516av92fxs","tag_id":"ck6aem40o0009v251ciwxg2e0","_id":"ck6aem417000cv2511gh78994"},{"post_id":"ck6aem3z70006v2516av92fxs","tag_id":"ck6aem40z000av2514uum89s4","_id":"ck6aem419000dv2515poa0otp"},{"post_id":"ck6aem41o000ev251hji5aeu4","tag_id":"ck6aem428000hv25102jv7asg","_id":"ck6aem44i000rv2512wht38ec"},{"post_id":"ck6aem41o000ev251hji5aeu4","tag_id":"ck6aem43g000mv2518e83c0ru","_id":"ck6aem44o000tv251dbs17k2m"},{"post_id":"ck6aem41w000fv251hygx569u","tag_id":"ck6aem44c000qv2515ibg3hzj","_id":"ck6aem45d0011v2515fjrgxxh"},{"post_id":"ck6aem41w000fv251hygx569u","tag_id":"ck6aem44p000uv2519norbo2t","_id":"ck6aem45i0014v2517dnvbdb8"},{"post_id":"ck6aem41w000fv251hygx569u","tag_id":"ck6aem451000wv251f7xq8sss","_id":"ck6aem45o0017v251frt0b5ob"},{"post_id":"ck6aem42b000iv2511p1w3mbf","tag_id":"ck6aem44c000qv2515ibg3hzj","_id":"ck6aem466001dv2516oqk1bm4"},{"post_id":"ck6aem42b000iv2511p1w3mbf","tag_id":"ck6aem44p000uv2519norbo2t","_id":"ck6aem469001fv2519uh23835"},{"post_id":"ck6aem42b000iv2511p1w3mbf","tag_id":"ck6aem451000wv251f7xq8sss","_id":"ck6aem46h001jv251a64ibox8"},{"post_id":"ck6aem42t000jv251asxnf3fv","tag_id":"ck6aem44c000qv2515ibg3hzj","_id":"ck6aem46y001rv251esoh2n71"},{"post_id":"ck6aem42t000jv251asxnf3fv","tag_id":"ck6aem44p000uv2519norbo2t","_id":"ck6aem471001tv25117t06yqu"},{"post_id":"ck6aem42t000jv251asxnf3fv","tag_id":"ck6aem451000wv251f7xq8sss","_id":"ck6aem475001wv251bdphg78g"},{"post_id":"ck6aem435000kv2512kkpatkb","tag_id":"ck6aem44c000qv2515ibg3hzj","_id":"ck6aem47e0020v2514kmg62jz"},{"post_id":"ck6aem43r000nv251h0nz2z7s","tag_id":"ck6aem47a001zv2514orncqyc","_id":"ck6aem47r0026v251fm5v3zl6"},{"post_id":"ck6aem43r000nv251h0nz2z7s","tag_id":"ck6aem47f0022v251hunt5r86","_id":"ck6aem47s0027v251b1189yd0"},{"post_id":"ck6aem43r000nv251h0nz2z7s","tag_id":"ck6aem47j0024v25177831qka","_id":"ck6aem4890029v2518af23q6k"},{"post_id":"ck6aem440000ov251gmxxd7d0","tag_id":"ck6aem47a001zv2514orncqyc","_id":"ck6aem48g002bv25121eq5bn1"},{"post_id":"ck6aem440000ov251gmxxd7d0","tag_id":"ck6aem47s0028v251eo6obd5q","_id":"ck6aem48h002cv251abx06zdv"},{"post_id":"ck6aem440000ov251gmxxd7d0","tag_id":"ck6aem47j0024v25177831qka","_id":"ck6aem48i002dv2514lmjec5j"},{"post_id":"ck6aem435000kv2512kkpatkb","tag_id":"ck6aem44p000uv2519norbo2t","_id":"ck6aepmcj0000to51bjffdpxn"},{"post_id":"ck6aem435000kv2512kkpatkb","tag_id":"ck6aem451000wv251f7xq8sss","_id":"ck6aepmcn0001to510yyt6kwu"}],"Tag":[{"name":"3D打印","_id":"ck6aem40o0009v251ciwxg2e0"},{"name":"建模","_id":"ck6aem40z000av2514uum89s4"},{"name":"语音助手","_id":"ck6aem428000hv25102jv7asg"},{"name":"Siri","_id":"ck6aem43g000mv2518e83c0ru"},{"name":"Hexo","_id":"ck6aem44c000qv2515ibg3hzj"},{"name":"嵌入式","_id":"ck6aem44p000uv2519norbo2t"},{"name":"博客服务","_id":"ck6aem451000wv251f7xq8sss"},{"name":"Ƕ��ʽ","_id":"ck6aem471001uv25161450zfd"},{"name":"���ͷ���","_id":"ck6aem477001yv251fnll8blc"},{"name":"stm32","_id":"ck6aem47a001zv2514orncqyc"},{"name":"I2C","_id":"ck6aem47f0022v251hunt5r86"},{"name":"单片机","_id":"ck6aem47j0024v25177831qka"},{"name":"调试器","_id":"ck6aem47s0028v251eo6obd5q"}]}}